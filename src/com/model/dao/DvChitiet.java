/*
 * Java bean class for entity table dv_chitiet 
 * Created on 21 Oct 2017 ( Date ISO 2017-10-21 - Time 08:03:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "dv_chitiet"
 * 
 * @author Telosys Tools Generator
 *
 */
public class DvChitiet implements Serializable
{
    static Logger logger = LogManager.getLogger(DvChitiet.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    DVCT_ID ; // Primary Key

    public Integer    BN_ID ;
    public Integer    MA_LK ;
    public Integer    DV_ID ;
    public String     MA_DICH_VU ;
    public String     MA_VAT_TU ;
    public Integer    MA_NHOM ;
    public String     TEN_DICH_VU ;
    public Integer    SO_LUONG ;
    public Integer    DON_GIA ;
    public Integer    DON_GIA2 ;
    public Integer    THANH_TIEN ;
    public Integer    TT_BH ;
    public Integer    TT_NB ;
    public String     MA_KHOA ;
    public String     MA_BAC_SI ;
    public String     MA_BENH ;
    public String     NGAY_YL ;
    public String     NGAY_KQ ;
    public Integer    MA_PTTT ;
    public Integer    TYLE_TT ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public DvChitiet()
    {
        super();
        // Set default value 
this.BN_ID = 0;                         // data type = Integer   
this.MA_LK = 0;                         // data type = Integer   
this.DV_ID = 0;                         // data type = Integer   
this.MA_DICH_VU = "";//String.format("%50.50s", "MA_DICH_VU").trim(); // data type = String     50
this.MA_VAT_TU = "";//String.format("%255.255s", "MA_VAT_TU").trim(); // data type = String     255
this.MA_NHOM = 0;                         // data type = Integer   
this.TEN_DICH_VU = "";//String.format("%2000.2000s", "TEN_DICH_VU").trim(); // data type = String     2000
this.SO_LUONG = 0;                         // data type = Integer   
this.DON_GIA = 0;                         // data type = Integer   
this.DON_GIA2 = 0;                         // data type = Integer   
this.THANH_TIEN = 0;                         // data type = Integer   
this.TT_BH = 0;                         // data type = Integer   
this.TT_NB = 0;                         // data type = Integer   
this.MA_KHOA = "";//String.format("%3.3s", "MA_KHOA").trim(); // data type = String     3
this.MA_BAC_SI = "";//String.format("%16.16s", "MA_BAC_SI").trim(); // data type = String     16
this.MA_BENH = "";//String.format("%255.255s", "MA_BENH").trim(); // data type = String     255
this.NGAY_YL = "";//String.format("%12.12s", "NGAY_YL").trim(); // data type = String     12
this.NGAY_KQ = "";//String.format("%12.12s", "NGAY_KQ").trim(); // data type = String     12
this.MA_PTTT = 0;                         // data type = Integer   
this.TYLE_TT = 0;                         // data type = Integer   
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "dvctId" field value
     * This field is mapped on the database column "DVCT_ID" ( type "INT", NotNull : true ) 
     * @param DVCT_ID
     */
	public void setDVCT_ID( Integer DVCT_ID )
    {
        this.DVCT_ID = DVCT_ID ;
    }
    /**
     * Get the "DVCT_ID" field value
     * This field is mapped on the database column "DVCT_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getDVCT_ID()
    {
        return this.DVCT_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : BN_ID ( INT ) 
    /**
     * Set the "BN_ID" field value
     * This field is mapped on the database column "BN_ID" ( type "INT", NotNull : true ) 
     * @param BN_ID
     */
    public void setBN_ID( Integer BN_ID )
    {
        this.BN_ID = BN_ID;
    }
    /**
     * Get the "bnId" field value
     * This field is mapped on the database column "BN_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getBN_ID()
    {
        return this.BN_ID;
    }

    //--- DATABASE MAPPING : MA_LK ( INT ) 
    /**
     * Set the "MA_LK" field value
     * This field is mapped on the database column "MA_LK" ( type "INT", NotNull : true ) 
     * @param MA_LK
     */
    public void setMA_LK( Integer MA_LK )
    {
        this.MA_LK = MA_LK;
    }
    /**
     * Get the "maLk" field value
     * This field is mapped on the database column "MA_LK" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getMA_LK()
    {
        return this.MA_LK;
    }

    //--- DATABASE MAPPING : DV_ID ( INT ) 
    /**
     * Set the "DV_ID" field value
     * This field is mapped on the database column "DV_ID" ( type "INT", NotNull : true ) 
     * @param DV_ID
     */
    public void setDV_ID( Integer DV_ID )
    {
        this.DV_ID = DV_ID;
    }
    /**
     * Get the "dvId" field value
     * This field is mapped on the database column "DV_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getDV_ID()
    {
        return this.DV_ID;
    }

    //--- DATABASE MAPPING : MA_DICH_VU ( VARCHAR ) 
    /**
     * Set the "MA_DICH_VU" field value
     * This field is mapped on the database column "MA_DICH_VU" ( type "VARCHAR", NotNull : true ) 
     * @param MA_DICH_VU
     */
    public void setMA_DICH_VU( String MA_DICH_VU )
    {
        this.MA_DICH_VU = MA_DICH_VU;
    }
    /**
     * Get the "maDichVu" field value
     * This field is mapped on the database column "MA_DICH_VU" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_DICH_VU()
    {
        return this.MA_DICH_VU;
    }

    //--- DATABASE MAPPING : MA_VAT_TU ( VARCHAR ) 
    /**
     * Set the "MA_VAT_TU" field value
     * This field is mapped on the database column "MA_VAT_TU" ( type "VARCHAR", NotNull : true ) 
     * @param MA_VAT_TU
     */
    public void setMA_VAT_TU( String MA_VAT_TU )
    {
        this.MA_VAT_TU = MA_VAT_TU;
    }
    /**
     * Get the "maVatTu" field value
     * This field is mapped on the database column "MA_VAT_TU" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_VAT_TU()
    {
        return this.MA_VAT_TU;
    }

    //--- DATABASE MAPPING : MA_NHOM ( INT ) 
    /**
     * Set the "MA_NHOM" field value
     * This field is mapped on the database column "MA_NHOM" ( type "INT", NotNull : true ) 
     * @param MA_NHOM
     */
    public void setMA_NHOM( Integer MA_NHOM )
    {
        this.MA_NHOM = MA_NHOM;
    }
    /**
     * Get the "maNhom" field value
     * This field is mapped on the database column "MA_NHOM" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getMA_NHOM()
    {
        return this.MA_NHOM;
    }

    //--- DATABASE MAPPING : TEN_DICH_VU ( VARCHAR ) 
    /**
     * Set the "TEN_DICH_VU" field value
     * This field is mapped on the database column "TEN_DICH_VU" ( type "VARCHAR", NotNull : true ) 
     * @param TEN_DICH_VU
     */
    public void setTEN_DICH_VU( String TEN_DICH_VU )
    {
        this.TEN_DICH_VU = TEN_DICH_VU;
    }
    /**
     * Get the "tenDichVu" field value
     * This field is mapped on the database column "TEN_DICH_VU" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTEN_DICH_VU()
    {
        return this.TEN_DICH_VU;
    }

    //--- DATABASE MAPPING : SO_LUONG ( INT ) 
    /**
     * Set the "SO_LUONG" field value
     * This field is mapped on the database column "SO_LUONG" ( type "INT", NotNull : true ) 
     * @param SO_LUONG
     */
    public void setSO_LUONG( Integer SO_LUONG )
    {
        this.SO_LUONG = SO_LUONG;
    }
    /**
     * Get the "soLuong" field value
     * This field is mapped on the database column "SO_LUONG" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSO_LUONG()
    {
        return this.SO_LUONG;
    }

    //--- DATABASE MAPPING : DON_GIA ( INT ) 
    /**
     * Set the "DON_GIA" field value
     * This field is mapped on the database column "DON_GIA" ( type "INT", NotNull : true ) 
     * @param DON_GIA
     */
    public void setDON_GIA( Integer DON_GIA )
    {
        this.DON_GIA = DON_GIA;
    }
    /**
     * Get the "donGia" field value
     * This field is mapped on the database column "DON_GIA" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getDON_GIA()
    {
        return this.DON_GIA;
    }

    //--- DATABASE MAPPING : DON_GIA2 ( INT ) 
    /**
     * Set the "DON_GIA2" field value
     * This field is mapped on the database column "DON_GIA2" ( type "INT", NotNull : false ) 
     * @param DON_GIA2
     */
    public void setDON_GIA2( Integer DON_GIA2 )
    {
        this.DON_GIA2 = DON_GIA2;
    }
    /**
     * Get the "donGia2" field value
     * This field is mapped on the database column "DON_GIA2" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getDON_GIA2()
    {
        return this.DON_GIA2;
    }

    //--- DATABASE MAPPING : THANH_TIEN ( INT ) 
    /**
     * Set the "THANH_TIEN" field value
     * This field is mapped on the database column "THANH_TIEN" ( type "INT", NotNull : true ) 
     * @param THANH_TIEN
     */
    public void setTHANH_TIEN( Integer THANH_TIEN )
    {
        this.THANH_TIEN = THANH_TIEN;
    }
    /**
     * Get the "thanhTien" field value
     * This field is mapped on the database column "THANH_TIEN" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTHANH_TIEN()
    {
        return this.THANH_TIEN;
    }

    //--- DATABASE MAPPING : TT_BH ( INT ) 
    /**
     * Set the "TT_BH" field value
     * This field is mapped on the database column "TT_BH" ( type "INT", NotNull : true ) 
     * @param TT_BH
     */
    public void setTT_BH( Integer TT_BH )
    {
        this.TT_BH = TT_BH;
    }
    /**
     * Get the "ttBh" field value
     * This field is mapped on the database column "TT_BH" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTT_BH()
    {
        return this.TT_BH;
    }

    //--- DATABASE MAPPING : TT_NB ( INT ) 
    /**
     * Set the "TT_NB" field value
     * This field is mapped on the database column "TT_NB" ( type "INT", NotNull : true ) 
     * @param TT_NB
     */
    public void setTT_NB( Integer TT_NB )
    {
        this.TT_NB = TT_NB;
    }
    /**
     * Get the "ttNb" field value
     * This field is mapped on the database column "TT_NB" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTT_NB()
    {
        return this.TT_NB;
    }

    //--- DATABASE MAPPING : MA_KHOA ( VARCHAR ) 
    /**
     * Set the "MA_KHOA" field value
     * This field is mapped on the database column "MA_KHOA" ( type "VARCHAR", NotNull : true ) 
     * @param MA_KHOA
     */
    public void setMA_KHOA( String MA_KHOA )
    {
        this.MA_KHOA = MA_KHOA;
    }
    /**
     * Get the "maKhoa" field value
     * This field is mapped on the database column "MA_KHOA" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_KHOA()
    {
        return this.MA_KHOA;
    }

    //--- DATABASE MAPPING : MA_BAC_SI ( VARCHAR ) 
    /**
     * Set the "MA_BAC_SI" field value
     * This field is mapped on the database column "MA_BAC_SI" ( type "VARCHAR", NotNull : true ) 
     * @param MA_BAC_SI
     */
    public void setMA_BAC_SI( String MA_BAC_SI )
    {
        this.MA_BAC_SI = MA_BAC_SI;
    }
    /**
     * Get the "maBacSi" field value
     * This field is mapped on the database column "MA_BAC_SI" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_BAC_SI()
    {
        return this.MA_BAC_SI;
    }

    //--- DATABASE MAPPING : MA_BENH ( VARCHAR ) 
    /**
     * Set the "MA_BENH" field value
     * This field is mapped on the database column "MA_BENH" ( type "VARCHAR", NotNull : true ) 
     * @param MA_BENH
     */
    public void setMA_BENH( String MA_BENH )
    {
        this.MA_BENH = MA_BENH;
    }
    /**
     * Get the "maBenh" field value
     * This field is mapped on the database column "MA_BENH" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_BENH()
    {
        return this.MA_BENH;
    }

    //--- DATABASE MAPPING : NGAY_YL ( VARCHAR ) 
    /**
     * Set the "NGAY_YL" field value
     * This field is mapped on the database column "NGAY_YL" ( type "VARCHAR", NotNull : true ) 
     * @param NGAY_YL
     */
    public void setNGAY_YL( String NGAY_YL )
    {
        this.NGAY_YL = NGAY_YL;
    }
    /**
     * Get the "ngayYl" field value
     * This field is mapped on the database column "NGAY_YL" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getNGAY_YL()
    {
        return this.NGAY_YL;
    }

    //--- DATABASE MAPPING : NGAY_KQ ( VARCHAR ) 
    /**
     * Set the "NGAY_KQ" field value
     * This field is mapped on the database column "NGAY_KQ" ( type "VARCHAR", NotNull : true ) 
     * @param NGAY_KQ
     */
    public void setNGAY_KQ( String NGAY_KQ )
    {
        this.NGAY_KQ = NGAY_KQ;
    }
    /**
     * Get the "ngayKq" field value
     * This field is mapped on the database column "NGAY_KQ" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getNGAY_KQ()
    {
        return this.NGAY_KQ;
    }

    //--- DATABASE MAPPING : MA_PTTT ( INT ) 
    /**
     * Set the "MA_PTTT" field value
     * This field is mapped on the database column "MA_PTTT" ( type "INT", NotNull : true ) 
     * @param MA_PTTT
     */
    public void setMA_PTTT( Integer MA_PTTT )
    {
        this.MA_PTTT = MA_PTTT;
    }
    /**
     * Get the "maPttt" field value
     * This field is mapped on the database column "MA_PTTT" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getMA_PTTT()
    {
        return this.MA_PTTT;
    }

    //--- DATABASE MAPPING : TYLE_TT ( INT ) 
    /**
     * Set the "TYLE_TT" field value
     * This field is mapped on the database column "TYLE_TT" ( type "INT", NotNull : true ) 
     * @param TYLE_TT
     */
    public void setTYLE_TT( Integer TYLE_TT )
    {
        this.TYLE_TT = TYLE_TT;
    }
    /**
     * Get the "tyleTt" field value
     * This field is mapped on the database column "TYLE_TT" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTYLE_TT()
    {
        return this.TYLE_TT;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : false ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static DvChitiet load(String DVCT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from dv_chitiet where DVCT_ID=:DVCT_ID";
			logger.debug(sql);
			DvChitiet obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("DVCT_ID", DVCT_ID)
					.executeAndFetchFirst( DvChitiet.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+DVCT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [DvChitiet]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static DvChitiet load(Integer DVCT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from dv_chitiet where DVCT_ID=:DVCT_ID";
			logger.debug(sql);
			DvChitiet obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("DVCT_ID", DVCT_ID)
					.executeAndFetchFirst( DvChitiet.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+DVCT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [DvChitiet]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "dv_chitiet "
    			+" DVCT_ID = " + DVCT_ID                + "; BN_ID = " + BN_ID
                + "; MA_LK = " + MA_LK
                + "; DV_ID = " + DV_ID
                + "; MA_DICH_VU = " + MA_DICH_VU
                + "; MA_VAT_TU = " + MA_VAT_TU
                + "; MA_NHOM = " + MA_NHOM
                + "; TEN_DICH_VU = " + TEN_DICH_VU
                + "; SO_LUONG = " + SO_LUONG
                + "; DON_GIA = " + DON_GIA
                + "; DON_GIA2 = " + DON_GIA2
                + "; THANH_TIEN = " + THANH_TIEN
                + "; TT_BH = " + TT_BH
                + "; TT_NB = " + TT_NB
                + "; MA_KHOA = " + MA_KHOA
                + "; MA_BAC_SI = " + MA_BAC_SI
                + "; MA_BENH = " + MA_BENH
                + "; NGAY_YL = " + NGAY_YL
                + "; NGAY_KQ = " + NGAY_KQ
                + "; MA_PTTT = " + MA_PTTT
                + "; TYLE_TT = " + TYLE_TT
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( DVCT_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "dv_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table dv_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into dv_chitiet (BN_ID, MA_LK, DV_ID, MA_DICH_VU, MA_VAT_TU, MA_NHOM, TEN_DICH_VU, SO_LUONG, DON_GIA, DON_GIA2, THANH_TIEN, TT_BH, TT_NB, MA_KHOA, MA_BAC_SI, MA_BENH, NGAY_YL, NGAY_KQ, MA_PTTT, TYLE_TT,  STS) values(:BN_ID, :MA_LK, :DV_ID, :MA_DICH_VU, :MA_VAT_TU, :MA_NHOM, :TEN_DICH_VU, :SO_LUONG, :DON_GIA, :DON_GIA2, :THANH_TIEN, :TT_BH, :TT_NB, :MA_KHOA, :MA_BAC_SI, :MA_BENH, :NGAY_YL, :NGAY_KQ, :MA_PTTT, :TYLE_TT,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("BN_ID", this.BN_ID)
                            .addParameter("MA_LK", this.MA_LK)
                            .addParameter("DV_ID", this.DV_ID)
                            .addParameter("MA_DICH_VU", this.MA_DICH_VU)
                            .addParameter("MA_VAT_TU", this.MA_VAT_TU)
                            .addParameter("MA_NHOM", this.MA_NHOM)
                            .addParameter("TEN_DICH_VU", this.TEN_DICH_VU)
                            .addParameter("SO_LUONG", this.SO_LUONG)
                            .addParameter("DON_GIA", this.DON_GIA)
                            .addParameter("DON_GIA2", this.DON_GIA2)
                            .addParameter("THANH_TIEN", this.THANH_TIEN)
                            .addParameter("TT_BH", this.TT_BH)
                            .addParameter("TT_NB", this.TT_NB)
                            .addParameter("MA_KHOA", this.MA_KHOA)
                            .addParameter("MA_BAC_SI", this.MA_BAC_SI)
                            .addParameter("MA_BENH", this.MA_BENH)
                            .addParameter("NGAY_YL", this.NGAY_YL)
                            .addParameter("NGAY_KQ", this.NGAY_KQ)
                            .addParameter("MA_PTTT", this.MA_PTTT)
                            .addParameter("TYLE_TT", this.TYLE_TT)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [dv_chitiet] debug: "+toString());
            // Set KEYID DVCT_ID = newID
                            DVCT_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New dv_chitiet. ID="+DVCT_ID)
                    .addParameter("dbtable", "dv_chitiet")
                    .addParameter("fieldid", DVCT_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [dv_chitiet] OK: NewID="+createdId);
		} catch (Exception t) {
            logger.error("Add [dv_chitiet] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [dv_chitiet]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(DVCT_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "dv_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table dv_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update dv_chitiet set BN_ID=:BN_ID, MA_LK=:MA_LK, DV_ID=:DV_ID, MA_DICH_VU=:MA_DICH_VU, MA_VAT_TU=:MA_VAT_TU, MA_NHOM=:MA_NHOM, TEN_DICH_VU=:TEN_DICH_VU, SO_LUONG=:SO_LUONG, DON_GIA=:DON_GIA, DON_GIA2=:DON_GIA2, THANH_TIEN=:THANH_TIEN, TT_BH=:TT_BH, TT_NB=:TT_NB, MA_KHOA=:MA_KHOA, MA_BAC_SI=:MA_BAC_SI, MA_BENH=:MA_BENH, NGAY_YL=:NGAY_YL, NGAY_KQ=:NGAY_KQ, MA_PTTT=:MA_PTTT, TYLE_TT=:TYLE_TT, STS=:STS where DVCT_ID=:DVCT_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("BN_ID", this.BN_ID)
                    .addParameter("MA_LK", this.MA_LK)
                    .addParameter("DV_ID", this.DV_ID)
                    .addParameter("MA_DICH_VU", this.MA_DICH_VU)
                    .addParameter("MA_VAT_TU", this.MA_VAT_TU)
                    .addParameter("MA_NHOM", this.MA_NHOM)
                    .addParameter("TEN_DICH_VU", this.TEN_DICH_VU)
                    .addParameter("SO_LUONG", this.SO_LUONG)
                    .addParameter("DON_GIA", this.DON_GIA)
                    .addParameter("DON_GIA2", this.DON_GIA2)
                    .addParameter("THANH_TIEN", this.THANH_TIEN)
                    .addParameter("TT_BH", this.TT_BH)
                    .addParameter("TT_NB", this.TT_NB)
                    .addParameter("MA_KHOA", this.MA_KHOA)
                    .addParameter("MA_BAC_SI", this.MA_BAC_SI)
                    .addParameter("MA_BENH", this.MA_BENH)
                    .addParameter("NGAY_YL", this.NGAY_YL)
                    .addParameter("NGAY_KQ", this.NGAY_KQ)
                    .addParameter("MA_PTTT", this.MA_PTTT)
                    .addParameter("TYLE_TT", this.TYLE_TT)
                    .addParameter("STS", this.STS)
					.addParameter("DVCT_ID", this.DVCT_ID)
					.executeUpdate();
            logger.info("Update [dv_chitiet] OK: ID="+DVCT_ID);
            logger.info("Update [dv_chitiet] debug: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update dv_chitiet. ID="+DVCT_ID)
                    .addParameter("dbtable", "dv_chitiet")
                    .addParameter("fieldid", DVCT_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [dv_chitiet] Error: ID=["+DVCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [dv_chitiet]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(DVCT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "dv_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table dv_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update dv_chitiet set STS=:STS where DVCT_ID=:DVCT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("DVCT_ID", this.DVCT_ID)
					.executeUpdate();
			logger.error("Delete [dv_chitiet] OK: ID=["+DVCT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update dv_chitiet. ID="+DVCT_ID)
                    .addParameter("dbtable", "dv_chitiet")
                    .addParameter("fieldid", DVCT_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [dv_chitiet] Error: ID=["+DVCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [dv_chitiet]. ID=["+DVCT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(DVCT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "dv_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table dv_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from dv_chitiet where DVCT_ID=:DVCT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("DVCT_ID", this.DVCT_ID)
					.executeUpdate();
			logger.error("Delete Row [dv_chitiet] OK: ID=["+DVCT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update dv_chitiet. ID="+DVCT_ID)
                    .addParameter("dbtable", "dv_chitiet")
                    .addParameter("fieldid", DVCT_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [dv_chitiet] Error: ID=["+DVCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [dv_chitiet]. ID=["+DVCT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.Integer   
                if(this.BN_ID!=null)
                    return this.BN_ID.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Integer   
                if(this.MA_LK!=null)
                    return this.MA_LK.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.Integer   
                if(this.DV_ID!=null)
                    return this.DV_ID.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.String    
                if(this.MA_DICH_VU!=null)
                    return this.MA_DICH_VU.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.String    
                if(this.MA_VAT_TU!=null)
                    return this.MA_VAT_TU.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.Integer   
                if(this.MA_NHOM!=null)
                    return this.MA_NHOM.toString();
                else
                    return "N/A";
            case 6:
                // java.lang.String    
                if(this.TEN_DICH_VU!=null)
                    return this.TEN_DICH_VU.toString();
                else
                    return "N/A";
            case 7:
                // java.lang.Integer   
                if(this.SO_LUONG!=null)
                    return this.SO_LUONG.toString();
                else
                    return "N/A";
            case 8:
                // java.lang.Integer   
                if(this.DON_GIA!=null)
                    return this.DON_GIA.toString();
                else
                    return "N/A";
            case 9:
                // java.lang.Integer   
                if(this.DON_GIA2!=null)
                    return this.DON_GIA2.toString();
                else
                    return "N/A";
            case 10:
                // java.lang.Integer   
                if(this.THANH_TIEN!=null)
                    return this.THANH_TIEN.toString();
                else
                    return "N/A";
            case 11:
                // java.lang.Integer   
                if(this.TT_BH!=null)
                    return this.TT_BH.toString();
                else
                    return "N/A";
            case 12:
                // java.lang.Integer   
                if(this.TT_NB!=null)
                    return this.TT_NB.toString();
                else
                    return "N/A";
            case 13:
                // java.lang.String    
                if(this.MA_KHOA!=null)
                    return this.MA_KHOA.toString();
                else
                    return "N/A";
            case 14:
                // java.lang.String    
                if(this.MA_BAC_SI!=null)
                    return this.MA_BAC_SI.toString();
                else
                    return "N/A";
            case 15:
                // java.lang.String    
                if(this.MA_BENH!=null)
                    return this.MA_BENH.toString();
                else
                    return "N/A";
            case 16:
                // java.lang.String    
                if(this.NGAY_YL!=null)
                    return this.NGAY_YL.toString();
                else
                    return "N/A";
            case 17:
                // java.lang.String    
                if(this.NGAY_KQ!=null)
                    return this.NGAY_KQ.toString();
                else
                    return "N/A";
            case 18:
                // java.lang.Integer   
                if(this.MA_PTTT!=null)
                    return this.MA_PTTT.toString();
                else
                    return "N/A";
            case 19:
                // java.lang.Integer   
                if(this.TYLE_TT!=null)
                    return this.TYLE_TT.toString();
                else
                    return "N/A";
            case 20:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}