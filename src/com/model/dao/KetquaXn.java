/*
 * Java bean class for entity table ketqua_xn 
 * Created on 21 Oct 2017 ( Date ISO 2017-10-21 - Time 17:11:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "ketqua_xn"
 * 
 * @author Telosys Tools Generator
 *
 */
public class KetquaXn implements Serializable
{
    static Logger logger = LogManager.getLogger(KetquaXn.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    KQXN_ID ; // Primary Key

    public Integer    CS_ID ;
    public Integer    DV_ID ;
    public String     MA_DVKT ;
    public String     TEN_DVKT ;
    public String     CS_NAME ;
    public String     CS_VALUE ;
    public String     CS_RANGE1 ;
    public String     CS_RANGE2 ;
    public String     CS_DEFAULT ;
    public String     IMAGE_URL ;
    public String     MA_MAY ;
    public String     MO_TA ;
    public String     KET_LUAN ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public KetquaXn()
    {
        super();
        // Set default value 
this.CS_ID = 0;                         // data type = Integer   
this.DV_ID = 0;                         // data type = Integer   
this.MA_DVKT = "";//String.format("%32.32s", "MA_DVKT").trim(); // data type = String     32
this.TEN_DVKT = "";//String.format("%255.255s", "TEN_DVKT").trim(); // data type = String     255
this.CS_NAME = "";//String.format("%255.255s", "CS_NAME").trim(); // data type = String     255
this.CS_VALUE = "";//String.format("%255.255s", "CS_VALUE").trim(); // data type = String     255
this.CS_RANGE1 = "";//String.format("%255.255s", "CS_RANGE1").trim(); // data type = String     255
this.CS_RANGE2 = "";//String.format("%255.255s", "CS_RANGE2").trim(); // data type = String     255
this.CS_DEFAULT = "";//String.format("%255.255s", "CS_DEFAULT").trim(); // data type = String     255
this.IMAGE_URL = "";//String.format("%255.255s", "IMAGE_URL").trim(); // data type = String     255
this.MA_MAY = "";//String.format("%32.32s", "MA_MAY").trim(); // data type = String     32
this.MO_TA = "";//String.format("%255.255s", "MO_TA").trim(); // data type = String     255
this.KET_LUAN = "";//String.format("%255.255s", "KET_LUAN").trim(); // data type = String     255
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "kqxnId" field value
     * This field is mapped on the database column "KQXN_ID" ( type "INT", NotNull : true ) 
     * @param KQXN_ID
     */
	public void setKQXN_ID( Integer KQXN_ID )
    {
        this.KQXN_ID = KQXN_ID ;
    }
    /**
     * Get the "KQXN_ID" field value
     * This field is mapped on the database column "KQXN_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getKQXN_ID()
    {
        return this.KQXN_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : CS_ID ( INT ) 
    /**
     * Set the "CS_ID" field value
     * This field is mapped on the database column "CS_ID" ( type "INT", NotNull : true ) 
     * @param CS_ID
     */
    public void setCS_ID( Integer CS_ID )
    {
        this.CS_ID = CS_ID;
    }
    /**
     * Get the "csId" field value
     * This field is mapped on the database column "CS_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getCS_ID()
    {
        return this.CS_ID;
    }

    //--- DATABASE MAPPING : DV_ID ( INT ) 
    /**
     * Set the "DV_ID" field value
     * This field is mapped on the database column "DV_ID" ( type "INT", NotNull : true ) 
     * @param DV_ID
     */
    public void setDV_ID( Integer DV_ID )
    {
        this.DV_ID = DV_ID;
    }
    /**
     * Get the "dvId" field value
     * This field is mapped on the database column "DV_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getDV_ID()
    {
        return this.DV_ID;
    }

    //--- DATABASE MAPPING : MA_DVKT ( VARCHAR ) 
    /**
     * Set the "MA_DVKT" field value
     * This field is mapped on the database column "MA_DVKT" ( type "VARCHAR", NotNull : true ) 
     * @param MA_DVKT
     */
    public void setMA_DVKT( String MA_DVKT )
    {
        this.MA_DVKT = MA_DVKT;
    }
    /**
     * Get the "maDvkt" field value
     * This field is mapped on the database column "MA_DVKT" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_DVKT()
    {
        return this.MA_DVKT;
    }

    //--- DATABASE MAPPING : TEN_DVKT ( VARCHAR ) 
    /**
     * Set the "TEN_DVKT" field value
     * This field is mapped on the database column "TEN_DVKT" ( type "VARCHAR", NotNull : true ) 
     * @param TEN_DVKT
     */
    public void setTEN_DVKT( String TEN_DVKT )
    {
        this.TEN_DVKT = TEN_DVKT;
    }
    /**
     * Get the "tenDvkt" field value
     * This field is mapped on the database column "TEN_DVKT" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTEN_DVKT()
    {
        return this.TEN_DVKT;
    }

    //--- DATABASE MAPPING : CS_NAME ( VARCHAR ) 
    /**
     * Set the "CS_NAME" field value
     * This field is mapped on the database column "CS_NAME" ( type "VARCHAR", NotNull : true ) 
     * @param CS_NAME
     */
    public void setCS_NAME( String CS_NAME )
    {
        this.CS_NAME = CS_NAME;
    }
    /**
     * Get the "csName" field value
     * This field is mapped on the database column "CS_NAME" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_NAME()
    {
        return this.CS_NAME;
    }

    //--- DATABASE MAPPING : CS_VALUE ( VARCHAR ) 
    /**
     * Set the "CS_VALUE" field value
     * This field is mapped on the database column "CS_VALUE" ( type "VARCHAR", NotNull : true ) 
     * @param CS_VALUE
     */
    public void setCS_VALUE( String CS_VALUE )
    {
        this.CS_VALUE = CS_VALUE;
    }
    /**
     * Get the "csValue" field value
     * This field is mapped on the database column "CS_VALUE" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_VALUE()
    {
        return this.CS_VALUE;
    }

    //--- DATABASE MAPPING : CS_RANGE1 ( VARCHAR ) 
    /**
     * Set the "CS_RANGE1" field value
     * This field is mapped on the database column "CS_RANGE1" ( type "VARCHAR", NotNull : true ) 
     * @param CS_RANGE1
     */
    public void setCS_RANGE1( String CS_RANGE1 )
    {
        this.CS_RANGE1 = CS_RANGE1;
    }
    /**
     * Get the "csRange1" field value
     * This field is mapped on the database column "CS_RANGE1" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_RANGE1()
    {
        return this.CS_RANGE1;
    }

    //--- DATABASE MAPPING : CS_RANGE2 ( VARCHAR ) 
    /**
     * Set the "CS_RANGE2" field value
     * This field is mapped on the database column "CS_RANGE2" ( type "VARCHAR", NotNull : true ) 
     * @param CS_RANGE2
     */
    public void setCS_RANGE2( String CS_RANGE2 )
    {
        this.CS_RANGE2 = CS_RANGE2;
    }
    /**
     * Get the "csRange2" field value
     * This field is mapped on the database column "CS_RANGE2" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_RANGE2()
    {
        return this.CS_RANGE2;
    }

    //--- DATABASE MAPPING : CS_DEFAULT ( VARCHAR ) 
    /**
     * Set the "CS_DEFAULT" field value
     * This field is mapped on the database column "CS_DEFAULT" ( type "VARCHAR", NotNull : true ) 
     * @param CS_DEFAULT
     */
    public void setCS_DEFAULT( String CS_DEFAULT )
    {
        this.CS_DEFAULT = CS_DEFAULT;
    }
    /**
     * Get the "csDefault" field value
     * This field is mapped on the database column "CS_DEFAULT" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_DEFAULT()
    {
        return this.CS_DEFAULT;
    }

    //--- DATABASE MAPPING : IMAGE_URL ( VARCHAR ) 
    /**
     * Set the "IMAGE_URL" field value
     * This field is mapped on the database column "IMAGE_URL" ( type "VARCHAR", NotNull : false ) 
     * @param IMAGE_URL
     */
    public void setIMAGE_URL( String IMAGE_URL )
    {
        this.IMAGE_URL = IMAGE_URL;
    }
    /**
     * Get the "imageUrl" field value
     * This field is mapped on the database column "IMAGE_URL" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getIMAGE_URL()
    {
        return this.IMAGE_URL;
    }

    //--- DATABASE MAPPING : MA_MAY ( VARCHAR ) 
    /**
     * Set the "MA_MAY" field value
     * This field is mapped on the database column "MA_MAY" ( type "VARCHAR", NotNull : true ) 
     * @param MA_MAY
     */
    public void setMA_MAY( String MA_MAY )
    {
        this.MA_MAY = MA_MAY;
    }
    /**
     * Get the "maMay" field value
     * This field is mapped on the database column "MA_MAY" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_MAY()
    {
        return this.MA_MAY;
    }

    //--- DATABASE MAPPING : MO_TA ( VARCHAR ) 
    /**
     * Set the "MO_TA" field value
     * This field is mapped on the database column "MO_TA" ( type "VARCHAR", NotNull : false ) 
     * @param MO_TA
     */
    public void setMO_TA( String MO_TA )
    {
        this.MO_TA = MO_TA;
    }
    /**
     * Get the "moTa" field value
     * This field is mapped on the database column "MO_TA" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getMO_TA()
    {
        return this.MO_TA;
    }

    //--- DATABASE MAPPING : KET_LUAN ( VARCHAR ) 
    /**
     * Set the "KET_LUAN" field value
     * This field is mapped on the database column "KET_LUAN" ( type "VARCHAR", NotNull : false ) 
     * @param KET_LUAN
     */
    public void setKET_LUAN( String KET_LUAN )
    {
        this.KET_LUAN = KET_LUAN;
    }
    /**
     * Get the "ketLuan" field value
     * This field is mapped on the database column "KET_LUAN" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getKET_LUAN()
    {
        return this.KET_LUAN;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static KetquaXn load(String KQXN_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from ketqua_xn where KQXN_ID=:KQXN_ID";
			logger.debug(sql);
			KetquaXn obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("KQXN_ID", KQXN_ID)
					.executeAndFetchFirst( KetquaXn.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+KQXN_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [KetquaXn]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static KetquaXn load(Integer KQXN_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from ketqua_xn where KQXN_ID=:KQXN_ID";
			logger.debug(sql);
			KetquaXn obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("KQXN_ID", KQXN_ID)
					.executeAndFetchFirst( KetquaXn.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+KQXN_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [KetquaXn]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "ketqua_xn "
    			+" KQXN_ID = " + KQXN_ID                + "; CS_ID = " + CS_ID
                + "; DV_ID = " + DV_ID
                + "; MA_DVKT = " + MA_DVKT
                + "; TEN_DVKT = " + TEN_DVKT
                + "; CS_NAME = " + CS_NAME
                + "; CS_VALUE = " + CS_VALUE
                + "; CS_RANGE1 = " + CS_RANGE1
                + "; CS_RANGE2 = " + CS_RANGE2
                + "; CS_DEFAULT = " + CS_DEFAULT
                + "; IMAGE_URL = " + IMAGE_URL
                + "; MA_MAY = " + MA_MAY
                + "; MO_TA = " + MO_TA
                + "; KET_LUAN = " + KET_LUAN
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( KQXN_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "ketqua_xn")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table ketqua_xn");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into ketqua_xn (CS_ID, DV_ID, MA_DVKT, TEN_DVKT, CS_NAME, CS_VALUE, CS_RANGE1, CS_RANGE2, CS_DEFAULT, IMAGE_URL, MA_MAY, MO_TA, KET_LUAN,  STS) values(:CS_ID, :DV_ID, :MA_DVKT, :TEN_DVKT, :CS_NAME, :CS_VALUE, :CS_RANGE1, :CS_RANGE2, :CS_DEFAULT, :IMAGE_URL, :MA_MAY, :MO_TA, :KET_LUAN,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("CS_ID", this.CS_ID)
                            .addParameter("DV_ID", this.DV_ID)
                            .addParameter("MA_DVKT", this.MA_DVKT)
                            .addParameter("TEN_DVKT", this.TEN_DVKT)
                            .addParameter("CS_NAME", this.CS_NAME)
                            .addParameter("CS_VALUE", this.CS_VALUE)
                            .addParameter("CS_RANGE1", this.CS_RANGE1)
                            .addParameter("CS_RANGE2", this.CS_RANGE2)
                            .addParameter("CS_DEFAULT", this.CS_DEFAULT)
                            .addParameter("IMAGE_URL", this.IMAGE_URL)
                            .addParameter("MA_MAY", this.MA_MAY)
                            .addParameter("MO_TA", this.MO_TA)
                            .addParameter("KET_LUAN", this.KET_LUAN)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [ketqua_xn] debug: "+toString());
            // Set KEYID KQXN_ID = newID
                            KQXN_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New ketqua_xn. ID="+KQXN_ID)
                    .addParameter("dbtable", "ketqua_xn")
                    .addParameter("fieldid", KQXN_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [ketqua_xn] OK: NewID="+createdId);
		} catch (Exception t) {
            logger.error("Add [ketqua_xn] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [ketqua_xn]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(KQXN_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "ketqua_xn")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table ketqua_xn");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update ketqua_xn set CS_ID=:CS_ID, DV_ID=:DV_ID, MA_DVKT=:MA_DVKT, TEN_DVKT=:TEN_DVKT, CS_NAME=:CS_NAME, CS_VALUE=:CS_VALUE, CS_RANGE1=:CS_RANGE1, CS_RANGE2=:CS_RANGE2, CS_DEFAULT=:CS_DEFAULT, IMAGE_URL=:IMAGE_URL, MA_MAY=:MA_MAY, MO_TA=:MO_TA, KET_LUAN=:KET_LUAN, STS=:STS where KQXN_ID=:KQXN_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("CS_ID", this.CS_ID)
                    .addParameter("DV_ID", this.DV_ID)
                    .addParameter("MA_DVKT", this.MA_DVKT)
                    .addParameter("TEN_DVKT", this.TEN_DVKT)
                    .addParameter("CS_NAME", this.CS_NAME)
                    .addParameter("CS_VALUE", this.CS_VALUE)
                    .addParameter("CS_RANGE1", this.CS_RANGE1)
                    .addParameter("CS_RANGE2", this.CS_RANGE2)
                    .addParameter("CS_DEFAULT", this.CS_DEFAULT)
                    .addParameter("IMAGE_URL", this.IMAGE_URL)
                    .addParameter("MA_MAY", this.MA_MAY)
                    .addParameter("MO_TA", this.MO_TA)
                    .addParameter("KET_LUAN", this.KET_LUAN)
                    .addParameter("STS", this.STS)
					.addParameter("KQXN_ID", this.KQXN_ID)
					.executeUpdate();
            logger.info("Update [ketqua_xn] OK: ID="+KQXN_ID);
            logger.info("Update [ketqua_xn] debug: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update ketqua_xn. ID="+KQXN_ID)
                    .addParameter("dbtable", "ketqua_xn")
                    .addParameter("fieldid", KQXN_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [ketqua_xn] Error: ID=["+KQXN_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [ketqua_xn]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(KQXN_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "ketqua_xn")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table ketqua_xn");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update ketqua_xn set STS=:STS where KQXN_ID=:KQXN_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("KQXN_ID", this.KQXN_ID)
					.executeUpdate();
			logger.error("Delete [ketqua_xn] OK: ID=["+KQXN_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update ketqua_xn. ID="+KQXN_ID)
                    .addParameter("dbtable", "ketqua_xn")
                    .addParameter("fieldid", KQXN_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [ketqua_xn] Error: ID=["+KQXN_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [ketqua_xn]. ID=["+KQXN_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(KQXN_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "ketqua_xn")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table ketqua_xn");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from ketqua_xn where KQXN_ID=:KQXN_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("KQXN_ID", this.KQXN_ID)
					.executeUpdate();
			logger.error("Delete Row [ketqua_xn] OK: ID=["+KQXN_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update ketqua_xn. ID="+KQXN_ID)
                    .addParameter("dbtable", "ketqua_xn")
                    .addParameter("fieldid", KQXN_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [ketqua_xn] Error: ID=["+KQXN_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [ketqua_xn]. ID=["+KQXN_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.Integer   
                if(this.CS_ID!=null)
                    return this.CS_ID.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Integer   
                if(this.DV_ID!=null)
                    return this.DV_ID.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.String    
                if(this.MA_DVKT!=null)
                    return this.MA_DVKT.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.String    
                if(this.TEN_DVKT!=null)
                    return this.TEN_DVKT.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.String    
                if(this.CS_NAME!=null)
                    return this.CS_NAME.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.String    
                if(this.CS_VALUE!=null)
                    return this.CS_VALUE.toString();
                else
                    return "N/A";
            case 6:
                // java.lang.String    
                if(this.CS_RANGE1!=null)
                    return this.CS_RANGE1.toString();
                else
                    return "N/A";
            case 7:
                // java.lang.String    
                if(this.CS_RANGE2!=null)
                    return this.CS_RANGE2.toString();
                else
                    return "N/A";
            case 8:
                // java.lang.String    
                if(this.CS_DEFAULT!=null)
                    return this.CS_DEFAULT.toString();
                else
                    return "N/A";
            case 9:
                // java.lang.String    
                if(this.IMAGE_URL!=null)
                    return this.IMAGE_URL.toString();
                else
                    return "N/A";
            case 10:
                // java.lang.String    
                if(this.MA_MAY!=null)
                    return this.MA_MAY.toString();
                else
                    return "N/A";
            case 11:
                // java.lang.String    
                if(this.MO_TA!=null)
                    return this.MO_TA.toString();
                else
                    return "N/A";
            case 12:
                // java.lang.String    
                if(this.KET_LUAN!=null)
                    return this.KET_LUAN.toString();
                else
                    return "N/A";
            case 13:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}