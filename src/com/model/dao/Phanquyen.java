/*
 * Java bean class for entity table phanquyen 
 * Created on 30 Oct 2017 ( Date ISO 2017-10-30 - Time 08:47:48 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "phanquyen"
 * 
 * @author Telosys Tools Generator
 *
 */
public class Phanquyen implements Serializable
{
    static Logger logger = LogManager.getLogger(Phanquyen.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    PQ_ID ; // Primary Key

    public Integer    U_ID ;
    public String     U_NAME ;
    public String     TABLE_NAME ;
    public Integer    READ ;
    public Integer    INSERT ;
    public Integer    UPDATE ;
    public Integer    DELETE ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public Phanquyen()
    {
        super();
        // Set default value 
this.U_ID = 0;                         // data type = Integer   
this.U_NAME = "";//String.format("%50.50s", "U_NAME").trim(); // data type = String     50
this.TABLE_NAME = "";//String.format("%50.50s", "TABLE_NAME").trim(); // data type = String     50
this.READ = 0;                         // data type = Integer   
this.INSERT = 0;                         // data type = Integer   
this.UPDATE = 0;                         // data type = Integer   
this.DELETE = 0;                         // data type = Integer   
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "pqId" field value
     * This field is mapped on the database column "PQ_ID" ( type "INT", NotNull : true ) 
     * @param PQ_ID
     */
	public void setPQ_ID( Integer PQ_ID )
    {
        this.PQ_ID = PQ_ID ;
    }
    /**
     * Get the "PQ_ID" field value
     * This field is mapped on the database column "PQ_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getPQ_ID()
    {
        return this.PQ_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : U_ID ( INT ) 
    /**
     * Set the "U_ID" field value
     * This field is mapped on the database column "U_ID" ( type "INT", NotNull : false ) 
     * @param U_ID
     */
    public void setU_ID( Integer U_ID )
    {
        this.U_ID = U_ID;
    }
    /**
     * Get the "uId" field value
     * This field is mapped on the database column "U_ID" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getU_ID()
    {
        return this.U_ID;
    }

    //--- DATABASE MAPPING : U_NAME ( VARCHAR ) 
    /**
     * Set the "U_NAME" field value
     * This field is mapped on the database column "U_NAME" ( type "VARCHAR", NotNull : false ) 
     * @param U_NAME
     */
    public void setU_NAME( String U_NAME )
    {
        this.U_NAME = U_NAME;
    }
    /**
     * Get the "uName" field value
     * This field is mapped on the database column "U_NAME" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getU_NAME()
    {
        return this.U_NAME;
    }

    //--- DATABASE MAPPING : TABLE_NAME ( VARCHAR ) 
    /**
     * Set the "TABLE_NAME" field value
     * This field is mapped on the database column "TABLE_NAME" ( type "VARCHAR", NotNull : false ) 
     * @param TABLE_NAME
     */
    public void setTABLE_NAME( String TABLE_NAME )
    {
        this.TABLE_NAME = TABLE_NAME;
    }
    /**
     * Get the "tableName" field value
     * This field is mapped on the database column "TABLE_NAME" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getTABLE_NAME()
    {
        return this.TABLE_NAME;
    }

    //--- DATABASE MAPPING : READ ( INT ) 
    /**
     * Set the "READ" field value
     * This field is mapped on the database column "READ" ( type "INT", NotNull : false ) 
     * @param READ
     */
    public void setREAD( Integer READ )
    {
        this.READ = READ;
    }
    /**
     * Get the "read" field value
     * This field is mapped on the database column "READ" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getREAD()
    {
        return this.READ;
    }

    //--- DATABASE MAPPING : INSERT ( INT ) 
    /**
     * Set the "INSERT" field value
     * This field is mapped on the database column "INSERT" ( type "INT", NotNull : false ) 
     * @param INSERT
     */
    public void setINSERT( Integer INSERT )
    {
        this.INSERT = INSERT;
    }
    /**
     * Get the "insert" field value
     * This field is mapped on the database column "INSERT" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getINSERT()
    {
        return this.INSERT;
    }

    //--- DATABASE MAPPING : UPDATE ( INT ) 
    /**
     * Set the "UPDATE" field value
     * This field is mapped on the database column "UPDATE" ( type "INT", NotNull : false ) 
     * @param UPDATE
     */
    public void setUPDATE( Integer UPDATE )
    {
        this.UPDATE = UPDATE;
    }
    /**
     * Get the "update" field value
     * This field is mapped on the database column "UPDATE" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getUPDATE()
    {
        return this.UPDATE;
    }

    //--- DATABASE MAPPING : DELETE ( INT ) 
    /**
     * Set the "DELETE" field value
     * This field is mapped on the database column "DELETE" ( type "INT", NotNull : false ) 
     * @param DELETE
     */
    public void setDELETE( Integer DELETE )
    {
        this.DELETE = DELETE;
    }
    /**
     * Get the "delete" field value
     * This field is mapped on the database column "DELETE" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getDELETE()
    {
        return this.DELETE;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static Phanquyen load(String PQ_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from phanquyen where PQ_ID=:PQ_ID";
			logger.debug(sql);
			Phanquyen obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("PQ_ID", PQ_ID)
					.executeAndFetchFirst( Phanquyen.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+PQ_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Phanquyen]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static Phanquyen load(Integer PQ_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from phanquyen where PQ_ID=:PQ_ID";
			logger.debug(sql);
			Phanquyen obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("PQ_ID", PQ_ID)
					.executeAndFetchFirst( Phanquyen.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+PQ_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Phanquyen]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "phanquyen "
    			+" PQ_ID = " + PQ_ID                + "; U_ID = " + U_ID
                + "; U_NAME = " + U_NAME
                + "; TABLE_NAME = " + TABLE_NAME
                + "; READ = " + READ
                + "; INSERT = " + INSERT
                + "; UPDATE = " + UPDATE
                + "; DELETE = " + DELETE
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( PQ_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "phanquyen")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table phanquyen");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into phanquyen (U_ID, U_NAME, TABLE_NAME, READ, INSERT, UPDATE, DELETE,  STS) values(:U_ID, :U_NAME, :TABLE_NAME, :READ, :INSERT, :UPDATE, :DELETE,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("U_ID", this.U_ID)
                            .addParameter("U_NAME", this.U_NAME)
                            .addParameter("TABLE_NAME", this.TABLE_NAME)
                            .addParameter("READ", this.READ)
                            .addParameter("INSERT", this.INSERT)
                            .addParameter("UPDATE", this.UPDATE)
                            .addParameter("DELETE", this.DELETE)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [phanquyen] debug: "+toString());
            // Set KEYID PQ_ID = newID
                            PQ_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New phanquyen. ID="+PQ_ID)
                    .addParameter("dbtable", "phanquyen")
                    .addParameter("fieldid", PQ_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [phanquyen] OK: NewID="+createdId);
		} catch (Exception t) {
            logger.error("Add [phanquyen] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [phanquyen]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(PQ_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "phanquyen")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table phanquyen");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update phanquyen set U_ID=:U_ID, U_NAME=:U_NAME, TABLE_NAME=:TABLE_NAME, READ=:READ, INSERT=:INSERT, UPDATE=:UPDATE, DELETE=:DELETE, STS=:STS where PQ_ID=:PQ_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("U_ID", this.U_ID)
                    .addParameter("U_NAME", this.U_NAME)
                    .addParameter("TABLE_NAME", this.TABLE_NAME)
                    .addParameter("READ", this.READ)
                    .addParameter("INSERT", this.INSERT)
                    .addParameter("UPDATE", this.UPDATE)
                    .addParameter("DELETE", this.DELETE)
                    .addParameter("STS", this.STS)
					.addParameter("PQ_ID", this.PQ_ID)
					.executeUpdate();
            logger.info("Update [phanquyen] OK: ID="+PQ_ID);
            logger.info("Update [phanquyen] debug: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update phanquyen. ID="+PQ_ID)
                    .addParameter("dbtable", "phanquyen")
                    .addParameter("fieldid", PQ_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [phanquyen] Error: ID=["+PQ_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [phanquyen]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(PQ_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "phanquyen")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table phanquyen");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update phanquyen set STS=:STS where PQ_ID=:PQ_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("PQ_ID", this.PQ_ID)
					.executeUpdate();
			logger.error("Delete [phanquyen] OK: ID=["+PQ_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update phanquyen. ID="+PQ_ID)
                    .addParameter("dbtable", "phanquyen")
                    .addParameter("fieldid", PQ_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [phanquyen] Error: ID=["+PQ_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [phanquyen]. ID=["+PQ_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(PQ_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "phanquyen")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table phanquyen");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from phanquyen where PQ_ID=:PQ_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("PQ_ID", this.PQ_ID)
					.executeUpdate();
			logger.error("Delete Row [phanquyen] OK: ID=["+PQ_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update phanquyen. ID="+PQ_ID)
                    .addParameter("dbtable", "phanquyen")
                    .addParameter("fieldid", PQ_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [phanquyen] Error: ID=["+PQ_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [phanquyen]. ID=["+PQ_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.Integer   
                if(this.U_ID!=null)
                    return this.U_ID.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.String    
                if(this.U_NAME!=null)
                    return this.U_NAME.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.String    
                if(this.TABLE_NAME!=null)
                    return this.TABLE_NAME.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.Integer   
                if(this.READ!=null)
                    return this.READ.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.Integer   
                if(this.INSERT!=null)
                    return this.INSERT.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.Integer   
                if(this.UPDATE!=null)
                    return this.UPDATE.toString();
                else
                    return "N/A";
            case 6:
                // java.lang.Integer   
                if(this.DELETE!=null)
                    return this.DELETE.toString();
                else
                    return "N/A";
            case 7:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}