/*
 * Java bean class for entity table payment 
 * Created on 31 Oct 2017 ( Date ISO 2017-10-31 - Time 21:40:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;

import java.util.Date;

/**
 * Entity bean for table "payment"
 * 
 * @author Telosys Tools Generator
 *
 */
public class Payment implements Serializable
{
    static Logger logger = LogManager.getLogger(Payment.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    PAID_ID ; // Primary Key

    public String     HOADON ;
    public Integer    TONGCONG ;
    public Integer    V_ID ;
    public Date       NGAY_GIO ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public Payment()
    {
        super();
        // Set default value 
this.HOADON = "";//String.format("%32.32s", "HOADON").trim(); // data type = String     32
this.TONGCONG = 0;                         // data type = Integer   
this.V_ID = 0;                         // data type = Integer   
this.NGAY_GIO = new java.util.Date();      // data type = Date      
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "paidId" field value
     * This field is mapped on the database column "PAID_ID" ( type "INT", NotNull : true ) 
     * @param PAID_ID
     */
	public void setPAID_ID( Integer PAID_ID )
    {
        this.PAID_ID = PAID_ID ;
    }
    /**
     * Get the "PAID_ID" field value
     * This field is mapped on the database column "PAID_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getPAID_ID()
    {
        return this.PAID_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : HOADON ( VARCHAR ) 
    /**
     * Set the "HOADON" field value
     * This field is mapped on the database column "HOADON" ( type "VARCHAR", NotNull : true ) 
     * @param HOADON
     */
    public void setHOADON( String HOADON )
    {
        this.HOADON = HOADON;
    }
    /**
     * Get the "hoadon" field value
     * This field is mapped on the database column "HOADON" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getHOADON()
    {
        return this.HOADON;
    }

    //--- DATABASE MAPPING : TONGCONG ( INT ) 
    /**
     * Set the "TONGCONG" field value
     * This field is mapped on the database column "TONGCONG" ( type "INT", NotNull : true ) 
     * @param TONGCONG
     */
    public void setTONGCONG( Integer TONGCONG )
    {
        this.TONGCONG = TONGCONG;
    }
    /**
     * Get the "tongcong" field value
     * This field is mapped on the database column "TONGCONG" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTONGCONG()
    {
        return this.TONGCONG;
    }

    //--- DATABASE MAPPING : V_ID ( INT ) 
    /**
     * Set the "V_ID" field value
     * This field is mapped on the database column "V_ID" ( type "INT", NotNull : true ) 
     * @param V_ID
     */
    public void setV_ID( Integer V_ID )
    {
        this.V_ID = V_ID;
    }
    /**
     * Get the "vId" field value
     * This field is mapped on the database column "V_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getV_ID()
    {
        return this.V_ID;
    }

    //--- DATABASE MAPPING : NGAY_GIO ( TIMESTAMP ) 
    /**
     * Set the "NGAY_GIO" field value
     * This field is mapped on the database column "NGAY_GIO" ( type "TIMESTAMP", NotNull : true ) 
     * @param NGAY_GIO
     */
    public void setNGAY_GIO( Date NGAY_GIO )
    {
        this.NGAY_GIO = NGAY_GIO;
    }
    /**
     * Get the "ngayGio" field value
     * This field is mapped on the database column "NGAY_GIO" ( type "TIMESTAMP", NotNull : true ) 
     * @return the field value
     */
    public Date getNGAY_GIO()
    {
        return this.NGAY_GIO;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static Payment load(String PAID_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from payment where PAID_ID=:PAID_ID";
			logger.debug(sql);
			Payment obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("PAID_ID", PAID_ID)
					.executeAndFetchFirst( Payment.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+PAID_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Payment]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static Payment load(Integer PAID_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from payment where PAID_ID=:PAID_ID";
			logger.debug(sql);
			Payment obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("PAID_ID", PAID_ID)
					.executeAndFetchFirst( Payment.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+PAID_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Payment]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "payment "
    			+" PAID_ID = " + PAID_ID                + "; HOADON = " + HOADON
                + "; TONGCONG = " + TONGCONG
                + "; V_ID = " + V_ID
                + "; NGAY_GIO = " + NGAY_GIO
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( PAID_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "payment")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table payment");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into payment (HOADON, TONGCONG, V_ID, NGAY_GIO,  STS) values(:HOADON, :TONGCONG, :V_ID, :NGAY_GIO,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("HOADON", this.HOADON)
                            .addParameter("TONGCONG", this.TONGCONG)
                            .addParameter("V_ID", this.V_ID)
                            .addParameter("NGAY_GIO", this.NGAY_GIO)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [payment] debug: "+toString());
            // Set KEYID PAID_ID = newID
                            PAID_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New payment. ID="+PAID_ID)
                    .addParameter("dbtable", "payment")
                    .addParameter("fieldid", PAID_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [payment] OK: NewID="+createdId);
            logger.info("Add [payment] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [payment] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [payment]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(PAID_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "payment")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table payment");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            Payment temp = Payment.load(this.PAID_ID);
            if(temp!=null){
            	logger.info("Begin Update [payment]: "+temp.toString());
            }
			//
			String sql = "update payment set HOADON=:HOADON, TONGCONG=:TONGCONG, V_ID=:V_ID, NGAY_GIO=:NGAY_GIO, STS=:STS where PAID_ID=:PAID_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("HOADON", this.HOADON)
                    .addParameter("TONGCONG", this.TONGCONG)
                    .addParameter("V_ID", this.V_ID)
                    .addParameter("NGAY_GIO", this.NGAY_GIO)
                    .addParameter("STS", this.STS)
					.addParameter("PAID_ID", this.PAID_ID)
					.executeUpdate();
            logger.info("Update [payment] OK: ID="+PAID_ID);
            logger.info("End   Update [payment]: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update payment. ID="+PAID_ID)
                    .addParameter("dbtable", "payment")
                    .addParameter("fieldid", PAID_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [payment] Error: ID=["+PAID_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [payment]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(PAID_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "payment")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table payment");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update payment set STS=:STS where PAID_ID=:PAID_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("PAID_ID", this.PAID_ID)
					.executeUpdate();
			logger.error("Delete [payment] OK: ID=["+PAID_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update payment. ID="+PAID_ID)
                    .addParameter("dbtable", "payment")
                    .addParameter("fieldid", PAID_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [payment] Error: ID=["+PAID_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [payment]. ID=["+PAID_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(PAID_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "payment")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table payment");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from payment where PAID_ID=:PAID_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("PAID_ID", this.PAID_ID)
					.executeUpdate();
			logger.error("Delete Row [payment] OK: ID=["+PAID_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update payment. ID="+PAID_ID)
                    .addParameter("dbtable", "payment")
                    .addParameter("fieldid", PAID_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [payment] Error: ID=["+PAID_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [payment]. ID=["+PAID_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.String    
                if(this.HOADON!=null)
                    return this.HOADON.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Integer   
                if(this.TONGCONG!=null)
                    return this.TONGCONG.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.Integer   
                if(this.V_ID!=null)
                    return this.V_ID.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.Date      
                if(this.NGAY_GIO!=null)
                    return this.NGAY_GIO.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}