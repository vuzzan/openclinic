/*
 * Java bean class for entity table donvi_tinh 
 * Created on 31 Oct 2017 ( Date ISO 2017-10-31 - Time 21:40:05 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "donvi_tinh"
 * 
 * @author Telosys Tools Generator
 *
 */
public class DonviTinh implements Serializable
{
    static Logger logger = LogManager.getLogger(DonviTinh.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    DVT_MA ; // Primary Key

    public String     DVT_NAME ;

    /**
     * Default constructor
     */
    public DonviTinh()
    {
        super();
        // Set default value 
this.DVT_NAME = "";//String.format("%255.255s", "DVT_NAME").trim(); // data type = String     255
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "dvtMa" field value
     * This field is mapped on the database column "DVT_MA" ( type "INT", NotNull : true ) 
     * @param DVT_MA
     */
	public void setDVT_MA( Integer DVT_MA )
    {
        this.DVT_MA = DVT_MA ;
    }
    /**
     * Get the "DVT_MA" field value
     * This field is mapped on the database column "DVT_MA" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getDVT_MA()
    {
        return this.DVT_MA;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : DVT_NAME ( VARCHAR ) 
    /**
     * Set the "DVT_NAME" field value
     * This field is mapped on the database column "DVT_NAME" ( type "VARCHAR", NotNull : true ) 
     * @param DVT_NAME
     */
    public void setDVT_NAME( String DVT_NAME )
    {
        this.DVT_NAME = DVT_NAME;
    }
    /**
     * Get the "dvtName" field value
     * This field is mapped on the database column "DVT_NAME" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDVT_NAME()
    {
        return this.DVT_NAME;
    }



/*
 * CRUD functions
 */
    public static DonviTinh load(String DVT_MA) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from donvi_tinh where DVT_MA=:DVT_MA";
			logger.debug(sql);
			DonviTinh obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("DVT_MA", DVT_MA)
					.executeAndFetchFirst( DonviTinh.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+DVT_MA +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [DonviTinh]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static DonviTinh load(Integer DVT_MA) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from donvi_tinh where DVT_MA=:DVT_MA";
			logger.debug(sql);
			DonviTinh obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("DVT_MA", DVT_MA)
					.executeAndFetchFirst( DonviTinh.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+DVT_MA +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [DonviTinh]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "donvi_tinh "
    			+" DVT_MA = " + DVT_MA                + "; DVT_NAME = " + DVT_NAME
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( DVT_MA !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "donvi_tinh")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table donvi_tinh");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into donvi_tinh (DVT_NAME STS) values(:DVT_NAME 0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("DVT_NAME", this.DVT_NAME)
    					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [donvi_tinh] debug: "+toString());
            // Set KEYID DVT_MA = newID
                            DVT_MA = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New donvi_tinh. ID="+DVT_MA)
                    .addParameter("dbtable", "donvi_tinh")
                    .addParameter("fieldid", DVT_MA)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [donvi_tinh] OK: NewID="+createdId);
            logger.info("Add [donvi_tinh] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [donvi_tinh] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [donvi_tinh]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(DVT_MA==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "donvi_tinh")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table donvi_tinh");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            DonviTinh temp = DonviTinh.load(this.DVT_MA);
            if(temp!=null){
            	logger.info("Begin Update [donvi_tinh]: "+temp.toString());
            }
			//
			String sql = "update donvi_tinh set DVT_NAME=:DVT_NAME where DVT_MA=:DVT_MA";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("DVT_NAME", this.DVT_NAME)
					.addParameter("DVT_MA", this.DVT_MA)
					.executeUpdate();
            logger.info("Update [donvi_tinh] OK: ID="+DVT_MA);
            logger.info("End   Update [donvi_tinh]: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update donvi_tinh. ID="+DVT_MA)
                    .addParameter("dbtable", "donvi_tinh")
                    .addParameter("fieldid", DVT_MA)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [donvi_tinh] Error: ID=["+DVT_MA +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [donvi_tinh]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(DVT_MA==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "donvi_tinh")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table donvi_tinh");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update donvi_tinh set STS=:STS where DVT_MA=:DVT_MA";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("DVT_MA", this.DVT_MA)
					.executeUpdate();
			logger.error("Delete [donvi_tinh] OK: ID=["+DVT_MA +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update donvi_tinh. ID="+DVT_MA)
                    .addParameter("dbtable", "donvi_tinh")
                    .addParameter("fieldid", DVT_MA)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [donvi_tinh] Error: ID=["+DVT_MA +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [donvi_tinh]. ID=["+DVT_MA + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(DVT_MA==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "donvi_tinh")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table donvi_tinh");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from donvi_tinh where DVT_MA=:DVT_MA";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("DVT_MA", this.DVT_MA)
					.executeUpdate();
			logger.error("Delete Row [donvi_tinh] OK: ID=["+DVT_MA +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update donvi_tinh. ID="+DVT_MA)
                    .addParameter("dbtable", "donvi_tinh")
                    .addParameter("fieldid", DVT_MA)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [donvi_tinh] Error: ID=["+DVT_MA +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [donvi_tinh]. ID=["+DVT_MA + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.String    
                if(this.DVT_NAME!=null)
                    return this.DVT_NAME.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}