/*
 * Java bean class for entity table thuoc_chitiet 
 * Created on 21 Oct 2017 ( Date ISO 2017-10-21 - Time 09:17:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "thuoc_chitiet"
 * 
 * @author Telosys Tools Generator
 *
 */
public class ThuocChitiet implements Serializable
{
    static Logger logger = LogManager.getLogger(ThuocChitiet.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    TCT_ID ; // Primary Key

    public Integer    STT ;
    public Integer    MA_LK ;
    public Integer    THUOC_ID ;
    public Integer    SOLUONG ;
    public Integer    DON_GIA ;
    public String     TEN_THUOC ;
    public String     DON_VI_TINH ;
    public String     HOATCHAT ;
    public String     HAMLUONG ;
    public String     DONGGOI ;
    public Float      TYLE_TT ;
    public String     LIEU_DUNG ;
    public String     KHO_NAME ;
    public Integer    THANH_TIEN ;
    public Integer    CT_ID ;
    public Integer    NT_ID ;
    public Integer    TT_BH ;
    public Integer    TT_NB ;
    public String     MA_BENH ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public ThuocChitiet()
    {
        super();
        // Set default value 
this.STT = 0;                         // data type = Integer   
this.MA_LK = 0;                         // data type = Integer   
this.THUOC_ID = 0;                         // data type = Integer   
this.SOLUONG = 0;                         // data type = Integer   
this.DON_GIA = 0;                         // data type = Integer   
this.TEN_THUOC = "";//String.format("%255.255s", "TEN_THUOC").trim(); // data type = String     255
this.DON_VI_TINH = "";//String.format("%128.128s", "DON_VI_TINH").trim(); // data type = String     128
this.HOATCHAT = "";//String.format("%255.255s", "HOATCHAT").trim(); // data type = String     255
this.HAMLUONG = "";//String.format("%255.255s", "HAMLUONG").trim(); // data type = String     255
this.DONGGOI = "";//String.format("%255.255s", "DONGGOI").trim(); // data type = String     255
this.TYLE_TT = (float)0.0;      // data type = Float     
this.LIEU_DUNG = "";//String.format("%255.255s", "LIEU_DUNG").trim(); // data type = String     255
this.KHO_NAME = "";//String.format("%50.50s", "KHO_NAME").trim(); // data type = String     50
this.THANH_TIEN = 0;                         // data type = Integer   
this.CT_ID = 0;                         // data type = Integer   
this.NT_ID = 0;                         // data type = Integer   
this.TT_BH = 0;                         // data type = Integer   
this.TT_NB = 0;                         // data type = Integer   
this.MA_BENH = "";//String.format("%8.8s", "MA_BENH").trim(); // data type = String     8
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "tctId" field value
     * This field is mapped on the database column "TCT_ID" ( type "INT", NotNull : true ) 
     * @param TCT_ID
     */
	public void setTCT_ID( Integer TCT_ID )
    {
        this.TCT_ID = TCT_ID ;
    }
    /**
     * Get the "TCT_ID" field value
     * This field is mapped on the database column "TCT_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getTCT_ID()
    {
        return this.TCT_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : STT ( INT ) 
    /**
     * Set the "STT" field value
     * This field is mapped on the database column "STT" ( type "INT", NotNull : false ) 
     * @param STT
     */
    public void setSTT( Integer STT )
    {
        this.STT = STT;
    }
    /**
     * Get the "stt" field value
     * This field is mapped on the database column "STT" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getSTT()
    {
        return this.STT;
    }

    //--- DATABASE MAPPING : MA_LK ( INT ) 
    /**
     * Set the "MA_LK" field value
     * This field is mapped on the database column "MA_LK" ( type "INT", NotNull : true ) 
     * @param MA_LK
     */
    public void setMA_LK( Integer MA_LK )
    {
        this.MA_LK = MA_LK;
    }
    /**
     * Get the "maLk" field value
     * This field is mapped on the database column "MA_LK" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getMA_LK()
    {
        return this.MA_LK;
    }

    //--- DATABASE MAPPING : THUOC_ID ( INT ) 
    /**
     * Set the "THUOC_ID" field value
     * This field is mapped on the database column "THUOC_ID" ( type "INT", NotNull : true ) 
     * @param THUOC_ID
     */
    public void setTHUOC_ID( Integer THUOC_ID )
    {
        this.THUOC_ID = THUOC_ID;
    }
    /**
     * Get the "thuocId" field value
     * This field is mapped on the database column "THUOC_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTHUOC_ID()
    {
        return this.THUOC_ID;
    }

    //--- DATABASE MAPPING : SOLUONG ( INT ) 
    /**
     * Set the "SOLUONG" field value
     * This field is mapped on the database column "SOLUONG" ( type "INT", NotNull : true ) 
     * @param SOLUONG
     */
    public void setSOLUONG( Integer SOLUONG )
    {
        this.SOLUONG = SOLUONG;
    }
    /**
     * Get the "soluong" field value
     * This field is mapped on the database column "SOLUONG" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSOLUONG()
    {
        return this.SOLUONG;
    }

    //--- DATABASE MAPPING : DON_GIA ( INT ) 
    /**
     * Set the "DON_GIA" field value
     * This field is mapped on the database column "DON_GIA" ( type "INT", NotNull : true ) 
     * @param DON_GIA
     */
    public void setDON_GIA( Integer DON_GIA )
    {
        this.DON_GIA = DON_GIA;
    }
    /**
     * Get the "donGia" field value
     * This field is mapped on the database column "DON_GIA" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getDON_GIA()
    {
        return this.DON_GIA;
    }

    //--- DATABASE MAPPING : TEN_THUOC ( VARCHAR ) 
    /**
     * Set the "TEN_THUOC" field value
     * This field is mapped on the database column "TEN_THUOC" ( type "VARCHAR", NotNull : true ) 
     * @param TEN_THUOC
     */
    public void setTEN_THUOC( String TEN_THUOC )
    {
        this.TEN_THUOC = TEN_THUOC;
    }
    /**
     * Get the "tenThuoc" field value
     * This field is mapped on the database column "TEN_THUOC" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTEN_THUOC()
    {
        return this.TEN_THUOC;
    }

    //--- DATABASE MAPPING : DON_VI_TINH ( VARCHAR ) 
    /**
     * Set the "DON_VI_TINH" field value
     * This field is mapped on the database column "DON_VI_TINH" ( type "VARCHAR", NotNull : true ) 
     * @param DON_VI_TINH
     */
    public void setDON_VI_TINH( String DON_VI_TINH )
    {
        this.DON_VI_TINH = DON_VI_TINH;
    }
    /**
     * Get the "donViTinh" field value
     * This field is mapped on the database column "DON_VI_TINH" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDON_VI_TINH()
    {
        return this.DON_VI_TINH;
    }

    //--- DATABASE MAPPING : HOATCHAT ( VARCHAR ) 
    /**
     * Set the "HOATCHAT" field value
     * This field is mapped on the database column "HOATCHAT" ( type "VARCHAR", NotNull : true ) 
     * @param HOATCHAT
     */
    public void setHOATCHAT( String HOATCHAT )
    {
        this.HOATCHAT = HOATCHAT;
    }
    /**
     * Get the "hoatchat" field value
     * This field is mapped on the database column "HOATCHAT" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getHOATCHAT()
    {
        return this.HOATCHAT;
    }

    //--- DATABASE MAPPING : HAMLUONG ( VARCHAR ) 
    /**
     * Set the "HAMLUONG" field value
     * This field is mapped on the database column "HAMLUONG" ( type "VARCHAR", NotNull : true ) 
     * @param HAMLUONG
     */
    public void setHAMLUONG( String HAMLUONG )
    {
        this.HAMLUONG = HAMLUONG;
    }
    /**
     * Get the "hamluong" field value
     * This field is mapped on the database column "HAMLUONG" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getHAMLUONG()
    {
        return this.HAMLUONG;
    }

    //--- DATABASE MAPPING : DONGGOI ( VARCHAR ) 
    /**
     * Set the "DONGGOI" field value
     * This field is mapped on the database column "DONGGOI" ( type "VARCHAR", NotNull : true ) 
     * @param DONGGOI
     */
    public void setDONGGOI( String DONGGOI )
    {
        this.DONGGOI = DONGGOI;
    }
    /**
     * Get the "donggoi" field value
     * This field is mapped on the database column "DONGGOI" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDONGGOI()
    {
        return this.DONGGOI;
    }

    //--- DATABASE MAPPING : TYLE_TT ( FLOAT ) 
    /**
     * Set the "TYLE_TT" field value
     * This field is mapped on the database column "TYLE_TT" ( type "FLOAT", NotNull : true ) 
     * @param TYLE_TT
     */
    public void setTYLE_TT( Float TYLE_TT )
    {
        this.TYLE_TT = TYLE_TT;
    }
    /**
     * Get the "tyleTt" field value
     * This field is mapped on the database column "TYLE_TT" ( type "FLOAT", NotNull : true ) 
     * @return the field value
     */
    public Float getTYLE_TT()
    {
        return this.TYLE_TT;
    }

    //--- DATABASE MAPPING : LIEU_DUNG ( VARCHAR ) 
    /**
     * Set the "LIEU_DUNG" field value
     * This field is mapped on the database column "LIEU_DUNG" ( type "VARCHAR", NotNull : false ) 
     * @param LIEU_DUNG
     */
    public void setLIEU_DUNG( String LIEU_DUNG )
    {
        this.LIEU_DUNG = LIEU_DUNG;
    }
    /**
     * Get the "lieuDung" field value
     * This field is mapped on the database column "LIEU_DUNG" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getLIEU_DUNG()
    {
        return this.LIEU_DUNG;
    }

    //--- DATABASE MAPPING : KHO_NAME ( VARCHAR ) 
    /**
     * Set the "KHO_NAME" field value
     * This field is mapped on the database column "KHO_NAME" ( type "VARCHAR", NotNull : false ) 
     * @param KHO_NAME
     */
    public void setKHO_NAME( String KHO_NAME )
    {
        this.KHO_NAME = KHO_NAME;
    }
    /**
     * Get the "khoName" field value
     * This field is mapped on the database column "KHO_NAME" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getKHO_NAME()
    {
        return this.KHO_NAME;
    }

    //--- DATABASE MAPPING : THANH_TIEN ( INT ) 
    /**
     * Set the "THANH_TIEN" field value
     * This field is mapped on the database column "THANH_TIEN" ( type "INT", NotNull : true ) 
     * @param THANH_TIEN
     */
    public void setTHANH_TIEN( Integer THANH_TIEN )
    {
        this.THANH_TIEN = THANH_TIEN;
    }
    /**
     * Get the "thanhTien" field value
     * This field is mapped on the database column "THANH_TIEN" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTHANH_TIEN()
    {
        return this.THANH_TIEN;
    }

    //--- DATABASE MAPPING : CT_ID ( INT ) 
    /**
     * Set the "CT_ID" field value
     * This field is mapped on the database column "CT_ID" ( type "INT", NotNull : false ) 
     * @param CT_ID
     */
    public void setCT_ID( Integer CT_ID )
    {
        this.CT_ID = CT_ID;
    }
    /**
     * Get the "ctId" field value
     * This field is mapped on the database column "CT_ID" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getCT_ID()
    {
        return this.CT_ID;
    }

    //--- DATABASE MAPPING : NT_ID ( INT ) 
    /**
     * Set the "NT_ID" field value
     * This field is mapped on the database column "NT_ID" ( type "INT", NotNull : true ) 
     * @param NT_ID
     */
    public void setNT_ID( Integer NT_ID )
    {
        this.NT_ID = NT_ID;
    }
    /**
     * Get the "ntId" field value
     * This field is mapped on the database column "NT_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getNT_ID()
    {
        return this.NT_ID;
    }

    //--- DATABASE MAPPING : TT_BH ( INT ) 
    /**
     * Set the "TT_BH" field value
     * This field is mapped on the database column "TT_BH" ( type "INT", NotNull : true ) 
     * @param TT_BH
     */
    public void setTT_BH( Integer TT_BH )
    {
        this.TT_BH = TT_BH;
    }
    /**
     * Get the "ttBh" field value
     * This field is mapped on the database column "TT_BH" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTT_BH()
    {
        return this.TT_BH;
    }

    //--- DATABASE MAPPING : TT_NB ( INT ) 
    /**
     * Set the "TT_NB" field value
     * This field is mapped on the database column "TT_NB" ( type "INT", NotNull : true ) 
     * @param TT_NB
     */
    public void setTT_NB( Integer TT_NB )
    {
        this.TT_NB = TT_NB;
    }
    /**
     * Get the "ttNb" field value
     * This field is mapped on the database column "TT_NB" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTT_NB()
    {
        return this.TT_NB;
    }

    //--- DATABASE MAPPING : MA_BENH ( VARCHAR ) 
    /**
     * Set the "MA_BENH" field value
     * This field is mapped on the database column "MA_BENH" ( type "VARCHAR", NotNull : true ) 
     * @param MA_BENH
     */
    public void setMA_BENH( String MA_BENH )
    {
        this.MA_BENH = MA_BENH;
    }
    /**
     * Get the "maBenh" field value
     * This field is mapped on the database column "MA_BENH" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_BENH()
    {
        return this.MA_BENH;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static ThuocChitiet load(String TCT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from thuoc_chitiet where TCT_ID=:TCT_ID";
			logger.debug(sql);
			ThuocChitiet obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("TCT_ID", TCT_ID)
					.executeAndFetchFirst( ThuocChitiet.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+TCT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [ThuocChitiet]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static ThuocChitiet load(Integer TCT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from thuoc_chitiet where TCT_ID=:TCT_ID";
			logger.debug(sql);
			ThuocChitiet obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("TCT_ID", TCT_ID)
					.executeAndFetchFirst( ThuocChitiet.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+TCT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [ThuocChitiet]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "thuoc_chitiet "
    			+" TCT_ID = " + TCT_ID                + "; STT = " + STT
                + "; MA_LK = " + MA_LK
                + "; THUOC_ID = " + THUOC_ID
                + "; SOLUONG = " + SOLUONG
                + "; DON_GIA = " + DON_GIA
                + "; TEN_THUOC = " + TEN_THUOC
                + "; DON_VI_TINH = " + DON_VI_TINH
                + "; HOATCHAT = " + HOATCHAT
                + "; HAMLUONG = " + HAMLUONG
                + "; DONGGOI = " + DONGGOI
                + "; TYLE_TT = " + TYLE_TT
                + "; LIEU_DUNG = " + LIEU_DUNG
                + "; KHO_NAME = " + KHO_NAME
                + "; THANH_TIEN = " + THANH_TIEN
                + "; CT_ID = " + CT_ID
                + "; NT_ID = " + NT_ID
                + "; TT_BH = " + TT_BH
                + "; TT_NB = " + TT_NB
                + "; MA_BENH = " + MA_BENH
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( TCT_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into thuoc_chitiet (STT, MA_LK, THUOC_ID, SOLUONG, DON_GIA, TEN_THUOC, DON_VI_TINH, HOATCHAT, HAMLUONG, DONGGOI, TYLE_TT, LIEU_DUNG, KHO_NAME, THANH_TIEN, CT_ID, NT_ID, TT_BH, TT_NB, MA_BENH,  STS) values(:STT, :MA_LK, :THUOC_ID, :SOLUONG, :DON_GIA, :TEN_THUOC, :DON_VI_TINH, :HOATCHAT, :HAMLUONG, :DONGGOI, :TYLE_TT, :LIEU_DUNG, :KHO_NAME, :THANH_TIEN, :CT_ID, :NT_ID, :TT_BH, :TT_NB, :MA_BENH,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("STT", this.STT)
                            .addParameter("MA_LK", this.MA_LK)
                            .addParameter("THUOC_ID", this.THUOC_ID)
                            .addParameter("SOLUONG", this.SOLUONG)
                            .addParameter("DON_GIA", this.DON_GIA)
                            .addParameter("TEN_THUOC", this.TEN_THUOC)
                            .addParameter("DON_VI_TINH", this.DON_VI_TINH)
                            .addParameter("HOATCHAT", this.HOATCHAT)
                            .addParameter("HAMLUONG", this.HAMLUONG)
                            .addParameter("DONGGOI", this.DONGGOI)
                            .addParameter("TYLE_TT", this.TYLE_TT)
                            .addParameter("LIEU_DUNG", this.LIEU_DUNG)
                            .addParameter("KHO_NAME", this.KHO_NAME)
                            .addParameter("THANH_TIEN", this.THANH_TIEN)
                            .addParameter("CT_ID", this.CT_ID)
                            .addParameter("NT_ID", this.NT_ID)
                            .addParameter("TT_BH", this.TT_BH)
                            .addParameter("TT_NB", this.TT_NB)
                            .addParameter("MA_BENH", this.MA_BENH)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [thuoc_chitiet] debug: "+toString());
            // Set KEYID TCT_ID = newID
                            TCT_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [thuoc_chitiet] OK: NewID="+createdId);
		} catch (Exception t) {
            logger.error("Add [thuoc_chitiet] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [thuoc_chitiet]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(TCT_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update thuoc_chitiet set STT=:STT, MA_LK=:MA_LK, THUOC_ID=:THUOC_ID, SOLUONG=:SOLUONG, DON_GIA=:DON_GIA, TEN_THUOC=:TEN_THUOC, DON_VI_TINH=:DON_VI_TINH, HOATCHAT=:HOATCHAT, HAMLUONG=:HAMLUONG, DONGGOI=:DONGGOI, TYLE_TT=:TYLE_TT, LIEU_DUNG=:LIEU_DUNG, KHO_NAME=:KHO_NAME, THANH_TIEN=:THANH_TIEN, CT_ID=:CT_ID, NT_ID=:NT_ID, TT_BH=:TT_BH, TT_NB=:TT_NB, MA_BENH=:MA_BENH, STS=:STS where TCT_ID=:TCT_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("STT", this.STT)
                    .addParameter("MA_LK", this.MA_LK)
                    .addParameter("THUOC_ID", this.THUOC_ID)
                    .addParameter("SOLUONG", this.SOLUONG)
                    .addParameter("DON_GIA", this.DON_GIA)
                    .addParameter("TEN_THUOC", this.TEN_THUOC)
                    .addParameter("DON_VI_TINH", this.DON_VI_TINH)
                    .addParameter("HOATCHAT", this.HOATCHAT)
                    .addParameter("HAMLUONG", this.HAMLUONG)
                    .addParameter("DONGGOI", this.DONGGOI)
                    .addParameter("TYLE_TT", this.TYLE_TT)
                    .addParameter("LIEU_DUNG", this.LIEU_DUNG)
                    .addParameter("KHO_NAME", this.KHO_NAME)
                    .addParameter("THANH_TIEN", this.THANH_TIEN)
                    .addParameter("CT_ID", this.CT_ID)
                    .addParameter("NT_ID", this.NT_ID)
                    .addParameter("TT_BH", this.TT_BH)
                    .addParameter("TT_NB", this.TT_NB)
                    .addParameter("MA_BENH", this.MA_BENH)
                    .addParameter("STS", this.STS)
					.addParameter("TCT_ID", this.TCT_ID)
					.executeUpdate();
            logger.info("Update [thuoc_chitiet] OK: ID="+TCT_ID);
            logger.info("Update [thuoc_chitiet] debug: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [thuoc_chitiet] Error: ID=["+TCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [thuoc_chitiet]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(TCT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update thuoc_chitiet set STS=:STS where TCT_ID=:TCT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("TCT_ID", this.TCT_ID)
					.executeUpdate();
			logger.error("Delete [thuoc_chitiet] OK: ID=["+TCT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [thuoc_chitiet] Error: ID=["+TCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [thuoc_chitiet]. ID=["+TCT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(TCT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from thuoc_chitiet where TCT_ID=:TCT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("TCT_ID", this.TCT_ID)
					.executeUpdate();
			logger.error("Delete Row [thuoc_chitiet] OK: ID=["+TCT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [thuoc_chitiet] Error: ID=["+TCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [thuoc_chitiet]. ID=["+TCT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.Integer   
                if(this.STT!=null)
                    return this.STT.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Integer   
                if(this.MA_LK!=null)
                    return this.MA_LK.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.Integer   
                if(this.THUOC_ID!=null)
                    return this.THUOC_ID.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.Integer   
                if(this.SOLUONG!=null)
                    return this.SOLUONG.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.Integer   
                if(this.DON_GIA!=null)
                    return this.DON_GIA.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.String    
                if(this.TEN_THUOC!=null)
                    return this.TEN_THUOC.toString();
                else
                    return "N/A";
            case 6:
                // java.lang.String    
                if(this.DON_VI_TINH!=null)
                    return this.DON_VI_TINH.toString();
                else
                    return "N/A";
            case 7:
                // java.lang.String    
                if(this.HOATCHAT!=null)
                    return this.HOATCHAT.toString();
                else
                    return "N/A";
            case 8:
                // java.lang.String    
                if(this.HAMLUONG!=null)
                    return this.HAMLUONG.toString();
                else
                    return "N/A";
            case 9:
                // java.lang.String    
                if(this.DONGGOI!=null)
                    return this.DONGGOI.toString();
                else
                    return "N/A";
            case 10:
                // java.lang.Float     
                if(this.TYLE_TT!=null)
                    return this.TYLE_TT.toString();
                else
                    return "N/A";
            case 11:
                // java.lang.String    
                if(this.LIEU_DUNG!=null)
                    return this.LIEU_DUNG.toString();
                else
                    return "N/A";
            case 12:
                // java.lang.String    
                if(this.KHO_NAME!=null)
                    return this.KHO_NAME.toString();
                else
                    return "N/A";
            case 13:
                // java.lang.Integer   
                if(this.THANH_TIEN!=null)
                    return this.THANH_TIEN.toString();
                else
                    return "N/A";
            case 14:
                // java.lang.Integer   
                if(this.CT_ID!=null)
                    return this.CT_ID.toString();
                else
                    return "N/A";
            case 15:
                // java.lang.Integer   
                if(this.NT_ID!=null)
                    return this.NT_ID.toString();
                else
                    return "N/A";
            case 16:
                // java.lang.Integer   
                if(this.TT_BH!=null)
                    return this.TT_BH.toString();
                else
                    return "N/A";
            case 17:
                // java.lang.Integer   
                if(this.TT_NB!=null)
                    return this.TT_NB.toString();
                else
                    return "N/A";
            case 18:
                // java.lang.String    
                if(this.MA_BENH!=null)
                    return this.MA_BENH.toString();
                else
                    return "N/A";
            case 19:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}