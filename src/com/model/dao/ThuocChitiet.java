/*
 * Java bean class for entity table thuoc_chitiet 
 * Created on 15 Dec 2017 ( Date ISO 2017-12-15 - Time 14:28:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;

import java.util.Date;
import java.util.List;

import java.util.Date;

/**
 * Entity bean for table "thuoc_chitiet"
 * 
 * @author Telosys Tools Generator
 *
 */
public class ThuocChitiet implements Serializable
{
    static Logger logger = LogManager.getLogger(ThuocChitiet.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    TCT_ID ; // Primary Key

    public Integer    STT ;
    public Integer    MA_LK ;
    public Integer    THUOC_ID ;
    public String     MA_THUOC ;
    public String     MA_NHOM ;
    public String     TEN_THUOC ;
    public String     DON_VI_TINH ;
    public String     HAM_LUONG ;
    public String     DUONG_DUNG ;
    public String     LIEU_DUNG ;
    public String     SO_DANG_KY ;
    public String     TT_THAU ;
    public Integer    PHAM_VI ;
    public Integer    SO_LUONG ;
    public Integer    DON_GIA ;
    public Integer    THANH_TIEN ;
    public String     MA_KHOA ;
    public String     MA_BAC_SI ;
    public String     MA_BENH ;
    public Integer    MA_PTTT ;
    public Float      MUC_HUONG ;
    public Integer    CT_ID ;
    public Integer    TYLE_TT ;
    public Integer    T_NGUON_KHAC ;
    public Integer    T_BNCCT ;
    public Integer    T_NGOAIDS ;
    public Integer    NT_ID ;
    public Integer    TT_BHTT ;
    public Integer    TT_BNTT ;
    public String     KHO_NAME ;
    public Date       CUR_DATE ;
    public Integer    TYP ;
    public Integer    THANHTOAN ;
    public Integer    NV_ID ;
    public String     NV_NAME ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public ThuocChitiet()
    {
        super();
        // Set default value 
this.STT = 0;                         // data type = Integer   
this.MA_LK = 0;                         // data type = Integer   
this.THUOC_ID = 0;                         // data type = Integer   
this.MA_THUOC = "";//String.format("%50.50s", "MA_THUOC").trim(); // data type = String     50
this.MA_NHOM = "";//String.format("%5.5s", "MA_NHOM").trim(); // data type = String     5
this.TEN_THUOC = "";//String.format("%255.255s", "TEN_THUOC").trim(); // data type = String     255
this.DON_VI_TINH = "";//String.format("%128.128s", "DON_VI_TINH").trim(); // data type = String     128
this.HAM_LUONG = "";//String.format("%255.255s", "HAM_LUONG").trim(); // data type = String     255
this.DUONG_DUNG = "";//String.format("%50.50s", "DUONG_DUNG").trim(); // data type = String     50
this.LIEU_DUNG = "";//String.format("%255.255s", "LIEU_DUNG").trim(); // data type = String     255
this.SO_DANG_KY = "";//String.format("%255.255s", "SO_DANG_KY").trim(); // data type = String     255
this.TT_THAU = "";//String.format("%255.255s", "TT_THAU").trim(); // data type = String     255
this.PHAM_VI = 0;                         // data type = Integer   
this.SO_LUONG = 0;                         // data type = Integer   
this.DON_GIA = 0;                         // data type = Integer   
this.THANH_TIEN = 0;                         // data type = Integer   
this.MA_KHOA = "";//String.format("%15.15s", "MA_KHOA").trim(); // data type = String     15
this.MA_BAC_SI = "";//String.format("%255.255s", "MA_BAC_SI").trim(); // data type = String     255
this.MA_BENH = "";//String.format("%255.255s", "MA_BENH").trim(); // data type = String     255
this.MA_PTTT = 0;                         // data type = Integer   
this.MUC_HUONG = (float)0.0;      // data type = Float     
this.CT_ID = 0;                         // data type = Integer   
this.TYLE_TT = 0;                         // data type = Integer   
this.T_NGUON_KHAC = 0;                         // data type = Integer   
this.T_BNCCT = 0;                         // data type = Integer   
this.T_NGOAIDS = 0;                         // data type = Integer   
this.NT_ID = 0;                         // data type = Integer   
this.TT_BHTT = 0;                         // data type = Integer   
this.TT_BNTT = 0;                         // data type = Integer   
this.KHO_NAME = "";//String.format("%50.50s", "KHO_NAME").trim(); // data type = String     50
this.CUR_DATE = new java.util.Date();      // data type = Date      
this.TYP = 0;                         // data type = Integer   
this.THANHTOAN = 0;                         // data type = Integer   
this.NV_ID = 0;                         // data type = Integer   
this.NV_NAME = "";//String.format("%16.16s", "NV_NAME").trim(); // data type = String     16
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    public void copy(ThuocChitiet fromObj)
    {
        if(fromObj==null){
            return;
        }
        this.STT = fromObj.STT;
        this.MA_LK = fromObj.MA_LK;
        this.THUOC_ID = fromObj.THUOC_ID;
        this.MA_THUOC = fromObj.MA_THUOC;
        this.MA_NHOM = fromObj.MA_NHOM;
        this.TEN_THUOC = fromObj.TEN_THUOC;
        this.DON_VI_TINH = fromObj.DON_VI_TINH;
        this.HAM_LUONG = fromObj.HAM_LUONG;
        this.DUONG_DUNG = fromObj.DUONG_DUNG;
        this.LIEU_DUNG = fromObj.LIEU_DUNG;
        this.SO_DANG_KY = fromObj.SO_DANG_KY;
        this.TT_THAU = fromObj.TT_THAU;
        this.PHAM_VI = fromObj.PHAM_VI;
        this.SO_LUONG = fromObj.SO_LUONG;
        this.DON_GIA = fromObj.DON_GIA;
        this.THANH_TIEN = fromObj.THANH_TIEN;
        this.MA_KHOA = fromObj.MA_KHOA;
        this.MA_BAC_SI = fromObj.MA_BAC_SI;
        this.MA_BENH = fromObj.MA_BENH;
        this.MA_PTTT = fromObj.MA_PTTT;
        this.MUC_HUONG = fromObj.MUC_HUONG;
        this.CT_ID = fromObj.CT_ID;
        this.TYLE_TT = fromObj.TYLE_TT;
        this.T_NGUON_KHAC = fromObj.T_NGUON_KHAC;
        this.T_BNCCT = fromObj.T_BNCCT;
        this.T_NGOAIDS = fromObj.T_NGOAIDS;
        this.NT_ID = fromObj.NT_ID;
        this.TT_BHTT = fromObj.TT_BHTT;
        this.TT_BNTT = fromObj.TT_BNTT;
        this.KHO_NAME = fromObj.KHO_NAME;
        this.CUR_DATE = fromObj.CUR_DATE;
        this.TYP = fromObj.TYP;
        this.THANHTOAN = fromObj.THANHTOAN;
        this.NV_ID = fromObj.NV_ID;
        this.NV_NAME = fromObj.NV_NAME;
        this.STS = fromObj.STS;
    }
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "tctId" field value
     * This field is mapped on the database column "TCT_ID" ( type "INT", NotNull : true ) 
     * @param TCT_ID
     */
	public void setTCT_ID( Integer TCT_ID )
    {
        this.TCT_ID = TCT_ID ;
    }
    /**
     * Get the "TCT_ID" field value
     * This field is mapped on the database column "TCT_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getTCT_ID()
    {
        return this.TCT_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : STT ( INT ) 
    /**
     * Set the "STT" field value
     * This field is mapped on the database column "STT" ( type "INT", NotNull : false ) 
     * @param STT
     */
    public void setSTT( Integer STT )
    {
        this.STT = STT;
    }
    /**
     * Get the "stt" field value
     * This field is mapped on the database column "STT" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getSTT()
    {
        return this.STT;
    }

    //--- DATABASE MAPPING : MA_LK ( INT ) 
    /**
     * Set the "MA_LK" field value
     * This field is mapped on the database column "MA_LK" ( type "INT", NotNull : true ) 
     * @param MA_LK
     */
    public void setMA_LK( Integer MA_LK )
    {
        this.MA_LK = MA_LK;
    }
    /**
     * Get the "maLk" field value
     * This field is mapped on the database column "MA_LK" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getMA_LK()
    {
        return this.MA_LK;
    }

    //--- DATABASE MAPPING : THUOC_ID ( INT ) 
    /**
     * Set the "THUOC_ID" field value
     * This field is mapped on the database column "THUOC_ID" ( type "INT", NotNull : true ) 
     * @param THUOC_ID
     */
    public void setTHUOC_ID( Integer THUOC_ID )
    {
        this.THUOC_ID = THUOC_ID;
    }
    /**
     * Get the "thuocId" field value
     * This field is mapped on the database column "THUOC_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTHUOC_ID()
    {
        return this.THUOC_ID;
    }

    //--- DATABASE MAPPING : MA_THUOC ( VARCHAR ) 
    /**
     * Set the "MA_THUOC" field value
     * This field is mapped on the database column "MA_THUOC" ( type "VARCHAR", NotNull : true ) 
     * @param MA_THUOC
     */
    public void setMA_THUOC( String MA_THUOC )
    {
        this.MA_THUOC = MA_THUOC;
    }
    /**
     * Get the "maThuoc" field value
     * This field is mapped on the database column "MA_THUOC" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_THUOC()
    {
        return this.MA_THUOC;
    }

    //--- DATABASE MAPPING : MA_NHOM ( VARCHAR ) 
    /**
     * Set the "MA_NHOM" field value
     * This field is mapped on the database column "MA_NHOM" ( type "VARCHAR", NotNull : true ) 
     * @param MA_NHOM
     */
    public void setMA_NHOM( String MA_NHOM )
    {
        this.MA_NHOM = MA_NHOM;
    }
    /**
     * Get the "maNhom" field value
     * This field is mapped on the database column "MA_NHOM" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_NHOM()
    {
        return this.MA_NHOM;
    }

    //--- DATABASE MAPPING : TEN_THUOC ( VARCHAR ) 
    /**
     * Set the "TEN_THUOC" field value
     * This field is mapped on the database column "TEN_THUOC" ( type "VARCHAR", NotNull : true ) 
     * @param TEN_THUOC
     */
    public void setTEN_THUOC( String TEN_THUOC )
    {
        this.TEN_THUOC = TEN_THUOC;
    }
    /**
     * Get the "tenThuoc" field value
     * This field is mapped on the database column "TEN_THUOC" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTEN_THUOC()
    {
        return this.TEN_THUOC;
    }

    //--- DATABASE MAPPING : DON_VI_TINH ( VARCHAR ) 
    /**
     * Set the "DON_VI_TINH" field value
     * This field is mapped on the database column "DON_VI_TINH" ( type "VARCHAR", NotNull : true ) 
     * @param DON_VI_TINH
     */
    public void setDON_VI_TINH( String DON_VI_TINH )
    {
        this.DON_VI_TINH = DON_VI_TINH;
    }
    /**
     * Get the "donViTinh" field value
     * This field is mapped on the database column "DON_VI_TINH" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDON_VI_TINH()
    {
        return this.DON_VI_TINH;
    }

    //--- DATABASE MAPPING : HAM_LUONG ( VARCHAR ) 
    /**
     * Set the "HAM_LUONG" field value
     * This field is mapped on the database column "HAM_LUONG" ( type "VARCHAR", NotNull : true ) 
     * @param HAM_LUONG
     */
    public void setHAM_LUONG( String HAM_LUONG )
    {
        this.HAM_LUONG = HAM_LUONG;
    }
    /**
     * Get the "hamLuong" field value
     * This field is mapped on the database column "HAM_LUONG" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getHAM_LUONG()
    {
        return this.HAM_LUONG;
    }

    //--- DATABASE MAPPING : DUONG_DUNG ( VARCHAR ) 
    /**
     * Set the "DUONG_DUNG" field value
     * This field is mapped on the database column "DUONG_DUNG" ( type "VARCHAR", NotNull : true ) 
     * @param DUONG_DUNG
     */
    public void setDUONG_DUNG( String DUONG_DUNG )
    {
        this.DUONG_DUNG = DUONG_DUNG;
    }
    /**
     * Get the "duongDung" field value
     * This field is mapped on the database column "DUONG_DUNG" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDUONG_DUNG()
    {
        return this.DUONG_DUNG;
    }

    //--- DATABASE MAPPING : LIEU_DUNG ( VARCHAR ) 
    /**
     * Set the "LIEU_DUNG" field value
     * This field is mapped on the database column "LIEU_DUNG" ( type "VARCHAR", NotNull : false ) 
     * @param LIEU_DUNG
     */
    public void setLIEU_DUNG( String LIEU_DUNG )
    {
        this.LIEU_DUNG = LIEU_DUNG;
    }
    /**
     * Get the "lieuDung" field value
     * This field is mapped on the database column "LIEU_DUNG" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getLIEU_DUNG()
    {
        return this.LIEU_DUNG;
    }

    //--- DATABASE MAPPING : SO_DANG_KY ( VARCHAR ) 
    /**
     * Set the "SO_DANG_KY" field value
     * This field is mapped on the database column "SO_DANG_KY" ( type "VARCHAR", NotNull : true ) 
     * @param SO_DANG_KY
     */
    public void setSO_DANG_KY( String SO_DANG_KY )
    {
        this.SO_DANG_KY = SO_DANG_KY;
    }
    /**
     * Get the "soDangKy" field value
     * This field is mapped on the database column "SO_DANG_KY" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getSO_DANG_KY()
    {
        return this.SO_DANG_KY;
    }

    //--- DATABASE MAPPING : TT_THAU ( VARCHAR ) 
    /**
     * Set the "TT_THAU" field value
     * This field is mapped on the database column "TT_THAU" ( type "VARCHAR", NotNull : true ) 
     * @param TT_THAU
     */
    public void setTT_THAU( String TT_THAU )
    {
        this.TT_THAU = TT_THAU;
    }
    /**
     * Get the "ttThau" field value
     * This field is mapped on the database column "TT_THAU" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTT_THAU()
    {
        return this.TT_THAU;
    }

    //--- DATABASE MAPPING : PHAM_VI ( INT ) 
    /**
     * Set the "PHAM_VI" field value
     * This field is mapped on the database column "PHAM_VI" ( type "INT", NotNull : true ) 
     * @param PHAM_VI
     */
    public void setPHAM_VI( Integer PHAM_VI )
    {
        this.PHAM_VI = PHAM_VI;
    }
    /**
     * Get the "phamVi" field value
     * This field is mapped on the database column "PHAM_VI" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getPHAM_VI()
    {
        return this.PHAM_VI;
    }

    //--- DATABASE MAPPING : SO_LUONG ( INT ) 
    /**
     * Set the "SO_LUONG" field value
     * This field is mapped on the database column "SO_LUONG" ( type "INT", NotNull : true ) 
     * @param SO_LUONG
     */
    public void setSO_LUONG( Integer SO_LUONG )
    {
        this.SO_LUONG = SO_LUONG;
    }
    /**
     * Get the "soLuong" field value
     * This field is mapped on the database column "SO_LUONG" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSO_LUONG()
    {
        return this.SO_LUONG;
    }

    //--- DATABASE MAPPING : DON_GIA ( INT ) 
    /**
     * Set the "DON_GIA" field value
     * This field is mapped on the database column "DON_GIA" ( type "INT", NotNull : true ) 
     * @param DON_GIA
     */
    public void setDON_GIA( Integer DON_GIA )
    {
        this.DON_GIA = DON_GIA;
    }
    /**
     * Get the "donGia" field value
     * This field is mapped on the database column "DON_GIA" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getDON_GIA()
    {
        return this.DON_GIA;
    }

    //--- DATABASE MAPPING : THANH_TIEN ( INT ) 
    /**
     * Set the "THANH_TIEN" field value
     * This field is mapped on the database column "THANH_TIEN" ( type "INT", NotNull : true ) 
     * @param THANH_TIEN
     */
    public void setTHANH_TIEN( Integer THANH_TIEN )
    {
        this.THANH_TIEN = THANH_TIEN;
    }
    /**
     * Get the "thanhTien" field value
     * This field is mapped on the database column "THANH_TIEN" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTHANH_TIEN()
    {
        return this.THANH_TIEN;
    }

    //--- DATABASE MAPPING : MA_KHOA ( VARCHAR ) 
    /**
     * Set the "MA_KHOA" field value
     * This field is mapped on the database column "MA_KHOA" ( type "VARCHAR", NotNull : true ) 
     * @param MA_KHOA
     */
    public void setMA_KHOA( String MA_KHOA )
    {
        this.MA_KHOA = MA_KHOA;
    }
    /**
     * Get the "maKhoa" field value
     * This field is mapped on the database column "MA_KHOA" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_KHOA()
    {
        return this.MA_KHOA;
    }

    //--- DATABASE MAPPING : MA_BAC_SI ( VARCHAR ) 
    /**
     * Set the "MA_BAC_SI" field value
     * This field is mapped on the database column "MA_BAC_SI" ( type "VARCHAR", NotNull : true ) 
     * @param MA_BAC_SI
     */
    public void setMA_BAC_SI( String MA_BAC_SI )
    {
        this.MA_BAC_SI = MA_BAC_SI;
    }
    /**
     * Get the "maBacSi" field value
     * This field is mapped on the database column "MA_BAC_SI" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_BAC_SI()
    {
        return this.MA_BAC_SI;
    }

    //--- DATABASE MAPPING : MA_BENH ( VARCHAR ) 
    /**
     * Set the "MA_BENH" field value
     * This field is mapped on the database column "MA_BENH" ( type "VARCHAR", NotNull : true ) 
     * @param MA_BENH
     */
    public void setMA_BENH( String MA_BENH )
    {
        this.MA_BENH = MA_BENH;
    }
    /**
     * Get the "maBenh" field value
     * This field is mapped on the database column "MA_BENH" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_BENH()
    {
        return this.MA_BENH;
    }

    //--- DATABASE MAPPING : MA_PTTT ( INT ) 
    /**
     * Set the "MA_PTTT" field value
     * This field is mapped on the database column "MA_PTTT" ( type "INT", NotNull : true ) 
     * @param MA_PTTT
     */
    public void setMA_PTTT( Integer MA_PTTT )
    {
        this.MA_PTTT = MA_PTTT;
    }
    /**
     * Get the "maPttt" field value
     * This field is mapped on the database column "MA_PTTT" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getMA_PTTT()
    {
        return this.MA_PTTT;
    }

    //--- DATABASE MAPPING : TYLE_TT ( FLOAT ) 
    /**
     * Set the "TYLE_TT" field value
     * This field is mapped on the database column "TYLE_TT" ( type "FLOAT", NotNull : true ) 
     * @param TYLE_TT
     */
    public void setTYLE_TT( Float TYLE_TT )
    {
        this.MUC_HUONG = TYLE_TT;
    }
    /**
     * Get the "tyleTt" field value
     * This field is mapped on the database column "TYLE_TT" ( type "FLOAT", NotNull : true ) 
     * @return the field value
     */
    public Float getTYLE_TT()
    {
        return this.MUC_HUONG;
    }

    //--- DATABASE MAPPING : CT_ID ( INT ) 
    /**
     * Set the "CT_ID" field value
     * This field is mapped on the database column "CT_ID" ( type "INT", NotNull : false ) 
     * @param CT_ID
     */
    public void setCT_ID( Integer CT_ID )
    {
        this.CT_ID = CT_ID;
    }
    /**
     * Get the "ctId" field value
     * This field is mapped on the database column "CT_ID" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getCT_ID()
    {
        return this.CT_ID;
    }

    //--- DATABASE MAPPING : MUC_HUONG ( INT ) 
    /**
     * Set the "MUC_HUONG" field value
     * This field is mapped on the database column "MUC_HUONG" ( type "INT", NotNull : true ) 
     * @param MUC_HUONG
     */
    public void setMUC_HUONG( Integer MUC_HUONG )
    {
        this.TYLE_TT = MUC_HUONG;
    }
    /**
     * Get the "mucHuong" field value
     * This field is mapped on the database column "MUC_HUONG" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getMUC_HUONG()
    {
        return this.TYLE_TT;
    }

    //--- DATABASE MAPPING : T_NGUON_KHAC ( INT ) 
    /**
     * Set the "T_NGUON_KHAC" field value
     * This field is mapped on the database column "T_NGUON_KHAC" ( type "INT", NotNull : true ) 
     * @param T_NGUON_KHAC
     */
    public void setT_NGUON_KHAC( Integer T_NGUON_KHAC )
    {
        this.T_NGUON_KHAC = T_NGUON_KHAC;
    }
    /**
     * Get the "tNguonKhac" field value
     * This field is mapped on the database column "T_NGUON_KHAC" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getT_NGUON_KHAC()
    {
        return this.T_NGUON_KHAC;
    }

    //--- DATABASE MAPPING : T_BNCCT ( INT ) 
    /**
     * Set the "T_BNCCT" field value
     * This field is mapped on the database column "T_BNCCT" ( type "INT", NotNull : true ) 
     * @param T_BNCCT
     */
    public void setT_BNCCT( Integer T_BNCCT )
    {
        this.T_BNCCT = T_BNCCT;
    }
    /**
     * Get the "tBncct" field value
     * This field is mapped on the database column "T_BNCCT" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getT_BNCCT()
    {
        return this.T_BNCCT;
    }

    //--- DATABASE MAPPING : T_NGOAIDS ( INT ) 
    /**
     * Set the "T_NGOAIDS" field value
     * This field is mapped on the database column "T_NGOAIDS" ( type "INT", NotNull : true ) 
     * @param T_NGOAIDS
     */
    public void setT_NGOAIDS( Integer T_NGOAIDS )
    {
        this.T_NGOAIDS = T_NGOAIDS;
    }
    /**
     * Get the "tNgoaids" field value
     * This field is mapped on the database column "T_NGOAIDS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getT_NGOAIDS()
    {
        return this.T_NGOAIDS;
    }

    //--- DATABASE MAPPING : NT_ID ( INT ) 
    /**
     * Set the "NT_ID" field value
     * This field is mapped on the database column "NT_ID" ( type "INT", NotNull : true ) 
     * @param NT_ID
     */
    public void setNT_ID( Integer NT_ID )
    {
        this.NT_ID = NT_ID;
    }
    /**
     * Get the "ntId" field value
     * This field is mapped on the database column "NT_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getNT_ID()
    {
        return this.NT_ID;
    }

    //--- DATABASE MAPPING : TT_BHTT ( INT ) 
    /**
     * Set the "TT_BHTT" field value
     * This field is mapped on the database column "TT_BHTT" ( type "INT", NotNull : true ) 
     * @param TT_BHTT
     */
    public void setTT_BHTT( Integer TT_BHTT )
    {
        this.TT_BHTT = TT_BHTT;
    }
    /**
     * Get the "ttBhtt" field value
     * This field is mapped on the database column "TT_BHTT" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTT_BHTT()
    {
        return this.TT_BHTT;
    }

    //--- DATABASE MAPPING : TT_BNTT ( INT ) 
    /**
     * Set the "TT_BNTT" field value
     * This field is mapped on the database column "TT_BNTT" ( type "INT", NotNull : true ) 
     * @param TT_BNTT
     */
    public void setTT_BNTT( Integer TT_BNTT )
    {
        this.TT_BNTT = TT_BNTT;
    }
    /**
     * Get the "ttBntt" field value
     * This field is mapped on the database column "TT_BNTT" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTT_BNTT()
    {
        return this.TT_BNTT;
    }

    //--- DATABASE MAPPING : KHO_NAME ( VARCHAR ) 
    /**
     * Set the "KHO_NAME" field value
     * This field is mapped on the database column "KHO_NAME" ( type "VARCHAR", NotNull : false ) 
     * @param KHO_NAME
     */
    public void setKHO_NAME( String KHO_NAME )
    {
        this.KHO_NAME = KHO_NAME;
    }
    /**
     * Get the "khoName" field value
     * This field is mapped on the database column "KHO_NAME" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getKHO_NAME()
    {
        return this.KHO_NAME;
    }

    //--- DATABASE MAPPING : CUR_DATE ( TIMESTAMP ) 
    /**
     * Set the "CUR_DATE" field value
     * This field is mapped on the database column "CUR_DATE" ( type "TIMESTAMP", NotNull : true ) 
     * @param CUR_DATE
     */
    public void setCUR_DATE( Date CUR_DATE )
    {
        this.CUR_DATE = CUR_DATE;
    }
    /**
     * Get the "curDate" field value
     * This field is mapped on the database column "CUR_DATE" ( type "TIMESTAMP", NotNull : true ) 
     * @return the field value
     */
    public Date getCUR_DATE()
    {
        return this.CUR_DATE;
    }

    //--- DATABASE MAPPING : TYP ( INT ) 
    /**
     * Set the "TYP" field value
     * This field is mapped on the database column "TYP" ( type "INT", NotNull : true ) 
     * @param TYP
     */
    public void setTYP( Integer TYP )
    {
        this.TYP = TYP;
    }
    /**
     * Get the "typ" field value
     * This field is mapped on the database column "TYP" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTYP()
    {
        return this.TYP;
    }

    //--- DATABASE MAPPING : THANHTOAN ( INT UNSIGNED ) 
    /**
     * Set the "THANHTOAN" field value
     * This field is mapped on the database column "THANHTOAN" ( type "INT UNSIGNED", NotNull : false ) 
     * @param THANHTOAN
     */
    public void setTHANHTOAN( Integer THANHTOAN )
    {
        this.THANHTOAN = THANHTOAN;
    }
    /**
     * Get the "thanhtoan" field value
     * This field is mapped on the database column "THANHTOAN" ( type "INT UNSIGNED", NotNull : false ) 
     * @return the field value
     */
    public Integer getTHANHTOAN()
    {
        return this.THANHTOAN;
    }

    //--- DATABASE MAPPING : NV_ID ( INT ) 
    /**
     * Set the "NV_ID" field value
     * This field is mapped on the database column "NV_ID" ( type "INT", NotNull : false ) 
     * @param NV_ID
     */
    public void setNV_ID( Integer NV_ID )
    {
        this.NV_ID = NV_ID;
    }
    /**
     * Get the "nvId" field value
     * This field is mapped on the database column "NV_ID" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getNV_ID()
    {
        return this.NV_ID;
    }

    //--- DATABASE MAPPING : NV_NAME ( VARCHAR ) 
    /**
     * Set the "NV_NAME" field value
     * This field is mapped on the database column "NV_NAME" ( type "VARCHAR", NotNull : false ) 
     * @param NV_NAME
     */
    public void setNV_NAME( String NV_NAME )
    {
        this.NV_NAME = NV_NAME;
    }
    /**
     * Get the "nvName" field value
     * This field is mapped on the database column "NV_NAME" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getNV_NAME()
    {
        return this.NV_NAME;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static ThuocChitiet load(String TCT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from thuoc_chitiet where TCT_ID=:TCT_ID";
			logger.debug(sql);
			ThuocChitiet obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("TCT_ID", TCT_ID)
					.executeAndFetchFirst( ThuocChitiet.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+TCT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [ThuocChitiet]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static ThuocChitiet load(Integer TCT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from thuoc_chitiet where TCT_ID=:TCT_ID";
			logger.debug(sql);
			ThuocChitiet obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("TCT_ID", TCT_ID)
					.executeAndFetchFirst( ThuocChitiet.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+TCT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [ThuocChitiet]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "thuoc_chitiet "
    			+" TCT_ID = " + TCT_ID                + "; STT = " + STT
                + "; MA_LK = " + MA_LK
                + "; THUOC_ID = " + THUOC_ID
                + "; MA_THUOC = " + MA_THUOC
                + "; MA_NHOM = " + MA_NHOM
                + "; TEN_THUOC = " + TEN_THUOC
                + "; DON_VI_TINH = " + DON_VI_TINH
                + "; HAM_LUONG = " + HAM_LUONG
                + "; DUONG_DUNG = " + DUONG_DUNG
                + "; LIEU_DUNG = " + LIEU_DUNG
                + "; SO_DANG_KY = " + SO_DANG_KY
                + "; TT_THAU = " + TT_THAU
                + "; PHAM_VI = " + PHAM_VI
                + "; SO_LUONG = " + SO_LUONG
                + "; DON_GIA = " + DON_GIA
                + "; THANH_TIEN = " + THANH_TIEN
                + "; MA_KHOA = " + MA_KHOA
                + "; MA_BAC_SI = " + MA_BAC_SI
                + "; MA_BENH = " + MA_BENH
                + "; MA_PTTT = " + MA_PTTT
                + "; TYLE_TT = " + MUC_HUONG
                + "; CT_ID = " + CT_ID
                + "; MUC_HUONG = " + TYLE_TT
                + "; T_NGUON_KHAC = " + T_NGUON_KHAC
                + "; T_BNCCT = " + T_BNCCT
                + "; T_NGOAIDS = " + T_NGOAIDS
                + "; NT_ID = " + NT_ID
                + "; TT_BHTT = " + TT_BHTT
                + "; TT_BNTT = " + TT_BNTT
                + "; KHO_NAME = " + KHO_NAME
                + "; CUR_DATE = " + CUR_DATE
                + "; TYP = " + TYP
                + "; THANHTOAN = " + THANHTOAN
                + "; NV_ID = " + NV_ID
                + "; NV_NAME = " + NV_NAME
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( TCT_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            logger.info("Insert [thuoc_chitiet] BEGIN: "+ this.toString());

            String sql = "insert into thuoc_chitiet (STT, MA_LK, THUOC_ID, MA_THUOC, MA_NHOM, TEN_THUOC, DON_VI_TINH, HAM_LUONG, DUONG_DUNG, LIEU_DUNG, SO_DANG_KY, TT_THAU, PHAM_VI, SO_LUONG, DON_GIA, THANH_TIEN, MA_KHOA, MA_BAC_SI, MA_BENH, MA_PTTT, TYLE_TT, CT_ID, MUC_HUONG, T_NGUON_KHAC, T_BNCCT, T_NGOAIDS, NT_ID, TT_BHTT, TT_BNTT, KHO_NAME, CUR_DATE, TYP, THANHTOAN, NV_ID, NV_NAME,  STS) values(:STT, :MA_LK, :THUOC_ID, :MA_THUOC, :MA_NHOM, :TEN_THUOC, :DON_VI_TINH, :HAM_LUONG, :DUONG_DUNG, :LIEU_DUNG, :SO_DANG_KY, :TT_THAU, :PHAM_VI, :SO_LUONG, :DON_GIA, :THANH_TIEN, :MA_KHOA, :MA_BAC_SI, :MA_BENH, :MA_PTTT, :TYLE_TT, :CT_ID, :MUC_HUONG, :T_NGUON_KHAC, :T_BNCCT, :T_NGOAIDS, :NT_ID, :TT_BHTT, :TT_BNTT, :KHO_NAME, :CUR_DATE, :TYP, :THANHTOAN, :NV_ID, :NV_NAME,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("STT", this.STT)
                            .addParameter("MA_LK", this.MA_LK)
                            .addParameter("THUOC_ID", this.THUOC_ID)
                            .addParameter("MA_THUOC", this.MA_THUOC)
                            .addParameter("MA_NHOM", this.MA_NHOM)
                            .addParameter("TEN_THUOC", this.TEN_THUOC)
                            .addParameter("DON_VI_TINH", this.DON_VI_TINH)
                            .addParameter("HAM_LUONG", this.HAM_LUONG)
                            .addParameter("DUONG_DUNG", this.DUONG_DUNG)
                            .addParameter("LIEU_DUNG", this.LIEU_DUNG)
                            .addParameter("SO_DANG_KY", this.SO_DANG_KY)
                            .addParameter("TT_THAU", this.TT_THAU)
                            .addParameter("PHAM_VI", this.PHAM_VI)
                            .addParameter("SO_LUONG", this.SO_LUONG)
                            .addParameter("DON_GIA", this.DON_GIA)
                            .addParameter("THANH_TIEN", this.THANH_TIEN)
                            .addParameter("MA_KHOA", this.MA_KHOA)
                            .addParameter("MA_BAC_SI", this.MA_BAC_SI)
                            .addParameter("MA_BENH", this.MA_BENH)
                            .addParameter("MA_PTTT", this.MA_PTTT)
                            .addParameter("TYLE_TT", this.MUC_HUONG)
                            .addParameter("CT_ID", this.CT_ID)
                            .addParameter("MUC_HUONG", this.TYLE_TT)
                            .addParameter("T_NGUON_KHAC", this.T_NGUON_KHAC)
                            .addParameter("T_BNCCT", this.T_BNCCT)
                            .addParameter("T_NGOAIDS", this.T_NGOAIDS)
                            .addParameter("NT_ID", this.NT_ID)
                            .addParameter("TT_BHTT", this.TT_BHTT)
                            .addParameter("TT_BNTT", this.TT_BNTT)
                            .addParameter("KHO_NAME", this.KHO_NAME)
                            .addParameter("CUR_DATE", this.CUR_DATE)
                            .addParameter("TYP", this.TYP)
                            .addParameter("THANHTOAN", this.THANHTOAN)
                            .addParameter("NV_ID", this.NV_ID)
                            .addParameter("NV_NAME", this.NV_NAME)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [thuoc_chitiet] debug: "+toString());
            // Set KEYID TCT_ID = newID
                            TCT_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [thuoc_chitiet] OK: NewID="+createdId);
            logger.info("Add [thuoc_chitiet] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [thuoc_chitiet] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [thuoc_chitiet]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(TCT_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            ThuocChitiet temp = ThuocChitiet.load(this.TCT_ID);
            if(temp!=null){
            	logger.info("Begin Update [thuoc_chitiet]: "+temp.toString());
            }
            logger.info("Update [thuoc_chitiet] BEGIN: "+ this.toString());
			//
			String sql = "update thuoc_chitiet set STT=:STT, MA_LK=:MA_LK, THUOC_ID=:THUOC_ID, MA_THUOC=:MA_THUOC, MA_NHOM=:MA_NHOM, TEN_THUOC=:TEN_THUOC, DON_VI_TINH=:DON_VI_TINH, HAM_LUONG=:HAM_LUONG, DUONG_DUNG=:DUONG_DUNG, LIEU_DUNG=:LIEU_DUNG, SO_DANG_KY=:SO_DANG_KY, TT_THAU=:TT_THAU, PHAM_VI=:PHAM_VI, SO_LUONG=:SO_LUONG, DON_GIA=:DON_GIA, THANH_TIEN=:THANH_TIEN, MA_KHOA=:MA_KHOA, MA_BAC_SI=:MA_BAC_SI, MA_BENH=:MA_BENH, MA_PTTT=:MA_PTTT, TYLE_TT=:TYLE_TT, CT_ID=:CT_ID, MUC_HUONG=:MUC_HUONG, T_NGUON_KHAC=:T_NGUON_KHAC, T_BNCCT=:T_BNCCT, T_NGOAIDS=:T_NGOAIDS, NT_ID=:NT_ID, TT_BHTT=:TT_BHTT, TT_BNTT=:TT_BNTT, KHO_NAME=:KHO_NAME, CUR_DATE=:CUR_DATE, TYP=:TYP, THANHTOAN=:THANHTOAN, NV_ID=:NV_ID, NV_NAME=:NV_NAME, STS=:STS where TCT_ID=:TCT_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("STT", this.STT)
                    .addParameter("MA_LK", this.MA_LK)
                    .addParameter("THUOC_ID", this.THUOC_ID)
                    .addParameter("MA_THUOC", this.MA_THUOC)
                    .addParameter("MA_NHOM", this.MA_NHOM)
                    .addParameter("TEN_THUOC", this.TEN_THUOC)
                    .addParameter("DON_VI_TINH", this.DON_VI_TINH)
                    .addParameter("HAM_LUONG", this.HAM_LUONG)
                    .addParameter("DUONG_DUNG", this.DUONG_DUNG)
                    .addParameter("LIEU_DUNG", this.LIEU_DUNG)
                    .addParameter("SO_DANG_KY", this.SO_DANG_KY)
                    .addParameter("TT_THAU", this.TT_THAU)
                    .addParameter("PHAM_VI", this.PHAM_VI)
                    .addParameter("SO_LUONG", this.SO_LUONG)
                    .addParameter("DON_GIA", this.DON_GIA)
                    .addParameter("THANH_TIEN", this.THANH_TIEN)
                    .addParameter("MA_KHOA", this.MA_KHOA)
                    .addParameter("MA_BAC_SI", this.MA_BAC_SI)
                    .addParameter("MA_BENH", this.MA_BENH)
                    .addParameter("MA_PTTT", this.MA_PTTT)
                    .addParameter("TYLE_TT", this.MUC_HUONG)
                    .addParameter("CT_ID", this.CT_ID)
                    .addParameter("MUC_HUONG", this.TYLE_TT)
                    .addParameter("T_NGUON_KHAC", this.T_NGUON_KHAC)
                    .addParameter("T_BNCCT", this.T_BNCCT)
                    .addParameter("T_NGOAIDS", this.T_NGOAIDS)
                    .addParameter("NT_ID", this.NT_ID)
                    .addParameter("TT_BHTT", this.TT_BHTT)
                    .addParameter("TT_BNTT", this.TT_BNTT)
                    .addParameter("KHO_NAME", this.KHO_NAME)
                    .addParameter("CUR_DATE", this.CUR_DATE)
                    .addParameter("TYP", this.TYP)
                    .addParameter("THANHTOAN", this.THANHTOAN)
                    .addParameter("NV_ID", this.NV_ID)
                    .addParameter("NV_NAME", this.NV_NAME)
                    .addParameter("STS", this.STS)
					.addParameter("TCT_ID", this.TCT_ID)
					.executeUpdate();
            logger.info("Update [thuoc_chitiet] OK: ID="+TCT_ID);
            logger.info("End   Update [thuoc_chitiet]: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [thuoc_chitiet] Error: ID=["+TCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [thuoc_chitiet]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(TCT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Update Row [thuoc_chitiet] BEGIN: ID=["+TCT_ID +"]. " + this.toString());
			String sql = "update thuoc_chitiet set STS=:STS where TCT_ID=:TCT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("TCT_ID", this.TCT_ID)
					.executeUpdate();
			logger.error("Delete [thuoc_chitiet] OK: ID=["+TCT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [thuoc_chitiet] Error: ID=["+TCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [thuoc_chitiet]. ID=["+TCT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(TCT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "thuoc_chitiet")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table thuoc_chitiet");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Delete Row [thuoc_chitiet] BEGIN: ID=["+TCT_ID +"]. " + this.toString());
			String sql = "delete from thuoc_chitiet where TCT_ID=:TCT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("TCT_ID", this.TCT_ID)
					.executeUpdate();
			logger.error("Delete Row [thuoc_chitiet] OK: ID=["+TCT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update thuoc_chitiet. ID="+TCT_ID)
                    .addParameter("dbtable", "thuoc_chitiet")
                    .addParameter("fieldid", TCT_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [thuoc_chitiet] Error: ID=["+TCT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [thuoc_chitiet]. ID=["+TCT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.Integer   
                if(this.STT!=null)
                    return this.STT.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Integer   
                if(this.MA_LK!=null)
                    return this.MA_LK.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.Integer   
                if(this.THUOC_ID!=null)
                    return this.THUOC_ID.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.String    
                if(this.MA_THUOC!=null)
                    return this.MA_THUOC.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.String    
                if(this.MA_NHOM!=null)
                    return this.MA_NHOM.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.String    
                if(this.TEN_THUOC!=null)
                    return this.TEN_THUOC.toString();
                else
                    return "N/A";
            case 6:
                // java.lang.String    
                if(this.DON_VI_TINH!=null)
                    return this.DON_VI_TINH.toString();
                else
                    return "N/A";
            case 7:
                // java.lang.String    
                if(this.HAM_LUONG!=null)
                    return this.HAM_LUONG.toString();
                else
                    return "N/A";
            case 8:
                // java.lang.String    
                if(this.DUONG_DUNG!=null)
                    return this.DUONG_DUNG.toString();
                else
                    return "N/A";
            case 9:
                // java.lang.String    
                if(this.LIEU_DUNG!=null)
                    return this.LIEU_DUNG.toString();
                else
                    return "N/A";
            case 10:
                // java.lang.String    
                if(this.SO_DANG_KY!=null)
                    return this.SO_DANG_KY.toString();
                else
                    return "N/A";
            case 11:
                // java.lang.String    
                if(this.TT_THAU!=null)
                    return this.TT_THAU.toString();
                else
                    return "N/A";
            case 12:
                // java.lang.Integer   
                if(this.PHAM_VI!=null)
                    return this.PHAM_VI.toString();
                else
                    return "N/A";
            case 13:
                // java.lang.Integer   
                if(this.SO_LUONG!=null)
                    return this.SO_LUONG.toString();
                else
                    return "N/A";
            case 14:
                // java.lang.Integer   
                if(this.DON_GIA!=null)
                    return this.DON_GIA.toString();
                else
                    return "N/A";
            case 15:
                // java.lang.Integer   
                if(this.THANH_TIEN!=null)
                    return this.THANH_TIEN.toString();
                else
                    return "N/A";
            case 16:
                // java.lang.String    
                if(this.MA_KHOA!=null)
                    return this.MA_KHOA.toString();
                else
                    return "N/A";
            case 17:
                // java.lang.String    
                if(this.MA_BAC_SI!=null)
                    return this.MA_BAC_SI.toString();
                else
                    return "N/A";
            case 18:
                // java.lang.String    
                if(this.MA_BENH!=null)
                    return this.MA_BENH.toString();
                else
                    return "N/A";
            case 19:
                // java.lang.Integer   
                if(this.MA_PTTT!=null)
                    return this.MA_PTTT.toString();
                else
                    return "N/A";
            case 20:
                // java.lang.Float     
                if(this.MUC_HUONG!=null)
                    return this.MUC_HUONG.toString();
                else
                    return "N/A";
            case 21:
                // java.lang.Integer   
                if(this.CT_ID!=null)
                    return this.CT_ID.toString();
                else
                    return "N/A";
            case 22:
                // java.lang.Integer   
                if(this.TYLE_TT!=null)
                    return this.TYLE_TT.toString();
                else
                    return "N/A";
            case 23:
                // java.lang.Integer   
                if(this.T_NGUON_KHAC!=null)
                    return this.T_NGUON_KHAC.toString();
                else
                    return "N/A";
            case 24:
                // java.lang.Integer   
                if(this.T_BNCCT!=null)
                    return this.T_BNCCT.toString();
                else
                    return "N/A";
            case 25:
                // java.lang.Integer   
                if(this.T_NGOAIDS!=null)
                    return this.T_NGOAIDS.toString();
                else
                    return "N/A";
            case 26:
                // java.lang.Integer   
                if(this.NT_ID!=null)
                    return this.NT_ID.toString();
                else
                    return "N/A";
            case 27:
                // java.lang.Integer   
                if(this.TT_BHTT!=null)
                    return this.TT_BHTT.toString();
                else
                    return "N/A";
            case 28:
                // java.lang.Integer   
                if(this.TT_BNTT!=null)
                    return this.TT_BNTT.toString();
                else
                    return "N/A";
            case 29:
                // java.lang.String    
                if(this.KHO_NAME!=null)
                    return this.KHO_NAME.toString();
                else
                    return "N/A";
            case 30:
                // java.lang.Date      
                if(this.CUR_DATE!=null)
                    return this.CUR_DATE.toString();
                else
                    return "N/A";
            case 31:
                // java.lang.Integer   
                if(this.TYP!=null)
                    return this.TYP.toString();
                else
                    return "N/A";
            case 32:
                // java.lang.Integer   
                if(this.THANHTOAN!=null)
                    return this.THANHTOAN.toString();
                else
                    return "N/A";
            case 33:
                // java.lang.Integer   
                if(this.NV_ID!=null)
                    return this.NV_ID.toString();
                else
                    return "N/A";
            case 34:
                // java.lang.String    
                if(this.NV_NAME!=null)
                    return this.NV_NAME.toString();
                else
                    return "N/A";
            case 35:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}