/*
 * Java bean class for entity table mst_lieudung 
 * Created on 14 Nov 2017 ( Date ISO 2017-11-14 - Time 14:56:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "mst_lieudung"
 * 
 * @author Telosys Tools Generator
 *
 */
public class MstLieudung implements Serializable
{
    static Logger logger = LogManager.getLogger(MstLieudung.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    LIEUDUNG_ID ; // Primary Key

    public String     LIEUDUNG_NAME ;
    public Integer    RANK ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public MstLieudung()
    {
        super();
        // Set default value 
this.LIEUDUNG_NAME = "";//String.format("%255.255s", "LIEUDUNG_NAME").trim(); // data type = String     255
this.RANK = 0;                         // data type = Integer   
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "lieudungId" field value
     * This field is mapped on the database column "LIEUDUNG_ID" ( type "INT", NotNull : true ) 
     * @param LIEUDUNG_ID
     */
	public void setLIEUDUNG_ID( Integer LIEUDUNG_ID )
    {
        this.LIEUDUNG_ID = LIEUDUNG_ID ;
    }
    /**
     * Get the "LIEUDUNG_ID" field value
     * This field is mapped on the database column "LIEUDUNG_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getLIEUDUNG_ID()
    {
        return this.LIEUDUNG_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : LIEUDUNG_NAME ( VARCHAR ) 
    /**
     * Set the "LIEUDUNG_NAME" field value
     * This field is mapped on the database column "LIEUDUNG_NAME" ( type "VARCHAR", NotNull : false ) 
     * @param LIEUDUNG_NAME
     */
    public void setLIEUDUNG_NAME( String LIEUDUNG_NAME )
    {
        this.LIEUDUNG_NAME = LIEUDUNG_NAME;
    }
    /**
     * Get the "lieudungName" field value
     * This field is mapped on the database column "LIEUDUNG_NAME" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getLIEUDUNG_NAME()
    {
        return this.LIEUDUNG_NAME;
    }

    //--- DATABASE MAPPING : RANK ( INT ) 
    /**
     * Set the "RANK" field value
     * This field is mapped on the database column "RANK" ( type "INT", NotNull : true ) 
     * @param RANK
     */
    public void setRANK( Integer RANK )
    {
        this.RANK = RANK;
    }
    /**
     * Get the "rank" field value
     * This field is mapped on the database column "RANK" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getRANK()
    {
        return this.RANK;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static MstLieudung load(String LIEUDUNG_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from mst_lieudung where LIEUDUNG_ID=:LIEUDUNG_ID";
			logger.debug(sql);
			MstLieudung obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("LIEUDUNG_ID", LIEUDUNG_ID)
					.executeAndFetchFirst( MstLieudung.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+LIEUDUNG_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [MstLieudung]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static MstLieudung load(Integer LIEUDUNG_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from mst_lieudung where LIEUDUNG_ID=:LIEUDUNG_ID";
			logger.debug(sql);
			MstLieudung obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("LIEUDUNG_ID", LIEUDUNG_ID)
					.executeAndFetchFirst( MstLieudung.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+LIEUDUNG_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [MstLieudung]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "mst_lieudung "
    			+" LIEUDUNG_ID = " + LIEUDUNG_ID                + "; LIEUDUNG_NAME = " + LIEUDUNG_NAME
                + "; RANK = " + RANK
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( LIEUDUNG_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "mst_lieudung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table mst_lieudung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            logger.info("Insert [mst_lieudung] BEGIN: "+ this.toString());

            String sql = "insert into mst_lieudung (LIEUDUNG_NAME, RANK,  STS) values(:LIEUDUNG_NAME, :RANK,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("LIEUDUNG_NAME", this.LIEUDUNG_NAME)
                            .addParameter("RANK", this.RANK)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [mst_lieudung] debug: "+toString());
            // Set KEYID LIEUDUNG_ID = newID
                            LIEUDUNG_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New mst_lieudung. ID="+LIEUDUNG_ID)
                    .addParameter("dbtable", "mst_lieudung")
                    .addParameter("fieldid", LIEUDUNG_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [mst_lieudung] OK: NewID="+createdId);
            logger.info("Add [mst_lieudung] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [mst_lieudung] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [mst_lieudung]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(LIEUDUNG_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "mst_lieudung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table mst_lieudung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            MstLieudung temp = MstLieudung.load(this.LIEUDUNG_ID);
            if(temp!=null){
            	logger.info("Begin Update [mst_lieudung]: "+temp.toString());
            }
            logger.info("Update [mst_lieudung] BEGIN: "+ this.toString());
			//
			String sql = "update mst_lieudung set LIEUDUNG_NAME=:LIEUDUNG_NAME, RANK=:RANK, STS=:STS where LIEUDUNG_ID=:LIEUDUNG_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("LIEUDUNG_NAME", this.LIEUDUNG_NAME)
                    .addParameter("RANK", this.RANK)
                    .addParameter("STS", this.STS)
					.addParameter("LIEUDUNG_ID", this.LIEUDUNG_ID)
					.executeUpdate();
            logger.info("Update [mst_lieudung] OK: ID="+LIEUDUNG_ID);
            logger.info("End   Update [mst_lieudung]: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update mst_lieudung. ID="+LIEUDUNG_ID)
                    .addParameter("dbtable", "mst_lieudung")
                    .addParameter("fieldid", LIEUDUNG_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [mst_lieudung] Error: ID=["+LIEUDUNG_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [mst_lieudung]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(LIEUDUNG_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "mst_lieudung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table mst_lieudung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Update Row [mst_lieudung] BEGIN: ID=["+LIEUDUNG_ID +"]. " + this.toString());
			String sql = "update mst_lieudung set STS=:STS where LIEUDUNG_ID=:LIEUDUNG_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("LIEUDUNG_ID", this.LIEUDUNG_ID)
					.executeUpdate();
			logger.error("Delete [mst_lieudung] OK: ID=["+LIEUDUNG_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update mst_lieudung. ID="+LIEUDUNG_ID)
                    .addParameter("dbtable", "mst_lieudung")
                    .addParameter("fieldid", LIEUDUNG_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [mst_lieudung] Error: ID=["+LIEUDUNG_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [mst_lieudung]. ID=["+LIEUDUNG_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(LIEUDUNG_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "mst_lieudung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table mst_lieudung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Delete Row [mst_lieudung] BEGIN: ID=["+LIEUDUNG_ID +"]. " + this.toString());
			String sql = "delete from mst_lieudung where LIEUDUNG_ID=:LIEUDUNG_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("LIEUDUNG_ID", this.LIEUDUNG_ID)
					.executeUpdate();
			logger.error("Delete Row [mst_lieudung] OK: ID=["+LIEUDUNG_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update mst_lieudung. ID="+LIEUDUNG_ID)
                    .addParameter("dbtable", "mst_lieudung")
                    .addParameter("fieldid", LIEUDUNG_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [mst_lieudung] Error: ID=["+LIEUDUNG_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [mst_lieudung]. ID=["+LIEUDUNG_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.String    
                if(this.LIEUDUNG_NAME!=null)
                    return this.LIEUDUNG_NAME.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Integer   
                if(this.RANK!=null)
                    return this.RANK.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}