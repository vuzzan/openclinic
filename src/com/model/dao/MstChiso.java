/*
 * Java bean class for entity table mst_chiso 
 * Created on 30 Oct 2017 ( Date ISO 2017-10-30 - Time 08:47:47 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "mst_chiso"
 * 
 * @author Telosys Tools Generator
 *
 */
public class MstChiso implements Serializable
{
    static Logger logger = LogManager.getLogger(MstChiso.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    CS_ID ; // Primary Key

    public String     CS_NAME ;
    public String     CS_RANGE1 ;
    public String     CS_RANGE2 ;
    public String     CS_DEFAULT ;
    public String     CS_DESC ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public MstChiso()
    {
        super();
        // Set default value 
this.CS_NAME = "";//String.format("%256.256s", "CS_NAME").trim(); // data type = String     256
this.CS_RANGE1 = "";//String.format("%256.256s", "CS_RANGE1").trim(); // data type = String     256
this.CS_RANGE2 = "";//String.format("%256.256s", "CS_RANGE2").trim(); // data type = String     256
this.CS_DEFAULT = "";//String.format("%256.256s", "CS_DEFAULT").trim(); // data type = String     256
this.CS_DESC = "";//String.format("%256.256s", "CS_DESC").trim(); // data type = String     256
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "csId" field value
     * This field is mapped on the database column "CS_ID" ( type "INT", NotNull : true ) 
     * @param CS_ID
     */
	public void setCS_ID( Integer CS_ID )
    {
        this.CS_ID = CS_ID ;
    }
    /**
     * Get the "CS_ID" field value
     * This field is mapped on the database column "CS_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getCS_ID()
    {
        return this.CS_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : CS_NAME ( VARCHAR ) 
    /**
     * Set the "CS_NAME" field value
     * This field is mapped on the database column "CS_NAME" ( type "VARCHAR", NotNull : true ) 
     * @param CS_NAME
     */
    public void setCS_NAME( String CS_NAME )
    {
        this.CS_NAME = CS_NAME;
    }
    /**
     * Get the "csName" field value
     * This field is mapped on the database column "CS_NAME" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_NAME()
    {
        return this.CS_NAME;
    }

    //--- DATABASE MAPPING : CS_RANGE1 ( VARCHAR ) 
    /**
     * Set the "CS_RANGE1" field value
     * This field is mapped on the database column "CS_RANGE1" ( type "VARCHAR", NotNull : true ) 
     * @param CS_RANGE1
     */
    public void setCS_RANGE1( String CS_RANGE1 )
    {
        this.CS_RANGE1 = CS_RANGE1;
    }
    /**
     * Get the "csRange1" field value
     * This field is mapped on the database column "CS_RANGE1" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_RANGE1()
    {
        return this.CS_RANGE1;
    }

    //--- DATABASE MAPPING : CS_RANGE2 ( VARCHAR ) 
    /**
     * Set the "CS_RANGE2" field value
     * This field is mapped on the database column "CS_RANGE2" ( type "VARCHAR", NotNull : true ) 
     * @param CS_RANGE2
     */
    public void setCS_RANGE2( String CS_RANGE2 )
    {
        this.CS_RANGE2 = CS_RANGE2;
    }
    /**
     * Get the "csRange2" field value
     * This field is mapped on the database column "CS_RANGE2" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_RANGE2()
    {
        return this.CS_RANGE2;
    }

    //--- DATABASE MAPPING : CS_DEFAULT ( VARCHAR ) 
    /**
     * Set the "CS_DEFAULT" field value
     * This field is mapped on the database column "CS_DEFAULT" ( type "VARCHAR", NotNull : true ) 
     * @param CS_DEFAULT
     */
    public void setCS_DEFAULT( String CS_DEFAULT )
    {
        this.CS_DEFAULT = CS_DEFAULT;
    }
    /**
     * Get the "csDefault" field value
     * This field is mapped on the database column "CS_DEFAULT" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_DEFAULT()
    {
        return this.CS_DEFAULT;
    }

    //--- DATABASE MAPPING : CS_DESC ( VARCHAR ) 
    /**
     * Set the "CS_DESC" field value
     * This field is mapped on the database column "CS_DESC" ( type "VARCHAR", NotNull : true ) 
     * @param CS_DESC
     */
    public void setCS_DESC( String CS_DESC )
    {
        this.CS_DESC = CS_DESC;
    }
    /**
     * Get the "csDesc" field value
     * This field is mapped on the database column "CS_DESC" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCS_DESC()
    {
        return this.CS_DESC;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static MstChiso load(String CS_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from mst_chiso where CS_ID=:CS_ID";
			logger.debug(sql);
			MstChiso obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("CS_ID", CS_ID)
					.executeAndFetchFirst( MstChiso.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+CS_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [MstChiso]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static MstChiso load(Integer CS_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from mst_chiso where CS_ID=:CS_ID";
			logger.debug(sql);
			MstChiso obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("CS_ID", CS_ID)
					.executeAndFetchFirst( MstChiso.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+CS_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [MstChiso]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "mst_chiso "
    			+" CS_ID = " + CS_ID                + "; CS_NAME = " + CS_NAME
                + "; CS_RANGE1 = " + CS_RANGE1
                + "; CS_RANGE2 = " + CS_RANGE2
                + "; CS_DEFAULT = " + CS_DEFAULT
                + "; CS_DESC = " + CS_DESC
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( CS_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "mst_chiso")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table mst_chiso");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into mst_chiso (CS_NAME, CS_RANGE1, CS_RANGE2, CS_DEFAULT, CS_DESC,  STS) values(:CS_NAME, :CS_RANGE1, :CS_RANGE2, :CS_DEFAULT, :CS_DESC,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("CS_NAME", this.CS_NAME)
                            .addParameter("CS_RANGE1", this.CS_RANGE1)
                            .addParameter("CS_RANGE2", this.CS_RANGE2)
                            .addParameter("CS_DEFAULT", this.CS_DEFAULT)
                            .addParameter("CS_DESC", this.CS_DESC)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [mst_chiso] debug: "+toString());
            // Set KEYID CS_ID = newID
                            CS_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New mst_chiso. ID="+CS_ID)
                    .addParameter("dbtable", "mst_chiso")
                    .addParameter("fieldid", CS_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [mst_chiso] OK: NewID="+createdId);
		} catch (Exception t) {
            logger.error("Add [mst_chiso] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [mst_chiso]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(CS_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "mst_chiso")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table mst_chiso");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update mst_chiso set CS_NAME=:CS_NAME, CS_RANGE1=:CS_RANGE1, CS_RANGE2=:CS_RANGE2, CS_DEFAULT=:CS_DEFAULT, CS_DESC=:CS_DESC, STS=:STS where CS_ID=:CS_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("CS_NAME", this.CS_NAME)
                    .addParameter("CS_RANGE1", this.CS_RANGE1)
                    .addParameter("CS_RANGE2", this.CS_RANGE2)
                    .addParameter("CS_DEFAULT", this.CS_DEFAULT)
                    .addParameter("CS_DESC", this.CS_DESC)
                    .addParameter("STS", this.STS)
					.addParameter("CS_ID", this.CS_ID)
					.executeUpdate();
            logger.info("Update [mst_chiso] OK: ID="+CS_ID);
            logger.info("Update [mst_chiso] debug: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update mst_chiso. ID="+CS_ID)
                    .addParameter("dbtable", "mst_chiso")
                    .addParameter("fieldid", CS_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [mst_chiso] Error: ID=["+CS_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [mst_chiso]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(CS_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "mst_chiso")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table mst_chiso");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update mst_chiso set STS=:STS where CS_ID=:CS_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("CS_ID", this.CS_ID)
					.executeUpdate();
			logger.error("Delete [mst_chiso] OK: ID=["+CS_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update mst_chiso. ID="+CS_ID)
                    .addParameter("dbtable", "mst_chiso")
                    .addParameter("fieldid", CS_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [mst_chiso] Error: ID=["+CS_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [mst_chiso]. ID=["+CS_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(CS_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "mst_chiso")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table mst_chiso");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from mst_chiso where CS_ID=:CS_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("CS_ID", this.CS_ID)
					.executeUpdate();
			logger.error("Delete Row [mst_chiso] OK: ID=["+CS_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update mst_chiso. ID="+CS_ID)
                    .addParameter("dbtable", "mst_chiso")
                    .addParameter("fieldid", CS_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [mst_chiso] Error: ID=["+CS_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [mst_chiso]. ID=["+CS_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.String    
                if(this.CS_NAME!=null)
                    return this.CS_NAME.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.String    
                if(this.CS_RANGE1!=null)
                    return this.CS_RANGE1.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.String    
                if(this.CS_RANGE2!=null)
                    return this.CS_RANGE2.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.String    
                if(this.CS_DEFAULT!=null)
                    return this.CS_DEFAULT.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.String    
                if(this.CS_DESC!=null)
                    return this.CS_DESC.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}