/*
 * Java bean class for entity table action_log 
 * Created on 14 Nov 2017 ( Date ISO 2017-11-14 - Time 14:56:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;

import java.util.Date;

/**
 * Entity bean for table "action_log"
 * 
 * @author Telosys Tools Generator
 *
 */
public class ActionLog implements Serializable
{
    static Logger logger = LogManager.getLogger(ActionLog.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    log_id ; // Primary Key

    public Integer    u_id ;
    public Date       u_time ;
    public String     u_action ;
    public String     dbtable ;
    public Integer    actionid ;
    public Integer    fieldid ;

    /**
     * Default constructor
     */
    public ActionLog()
    {
        super();
        // Set default value 
this.u_id = 0;                         // data type = Integer   
this.u_time = new java.util.Date();      // data type = Date      
this.u_action = "";//String.format("%255.255s", "u_action").trim(); // data type = String     255
this.dbtable = "";//String.format("%16.16s", "dbtable").trim(); // data type = String     16
this.actionid = 0;                         // data type = Integer   
this.fieldid = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "logId" field value
     * This field is mapped on the database column "log_id" ( type "INT", NotNull : true ) 
     * @param log_id
     */
	public void setlog_id( Integer log_id )
    {
        this.log_id = log_id ;
    }
    /**
     * Get the "log_id" field value
     * This field is mapped on the database column "log_id" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getlog_id()
    {
        return this.log_id;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : u_id ( INT ) 
    /**
     * Set the "u_id" field value
     * This field is mapped on the database column "u_id" ( type "INT", NotNull : false ) 
     * @param u_id
     */
    public void setu_id( Integer u_id )
    {
        this.u_id = u_id;
    }
    /**
     * Get the "uId" field value
     * This field is mapped on the database column "u_id" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getu_id()
    {
        return this.u_id;
    }

    //--- DATABASE MAPPING : u_time ( TIMESTAMP ) 
    /**
     * Set the "u_time" field value
     * This field is mapped on the database column "u_time" ( type "TIMESTAMP", NotNull : true ) 
     * @param u_time
     */
    public void setu_time( Date u_time )
    {
        this.u_time = u_time;
    }
    /**
     * Get the "uTime" field value
     * This field is mapped on the database column "u_time" ( type "TIMESTAMP", NotNull : true ) 
     * @return the field value
     */
    public Date getu_time()
    {
        return this.u_time;
    }

    //--- DATABASE MAPPING : u_action ( VARCHAR ) 
    /**
     * Set the "u_action" field value
     * This field is mapped on the database column "u_action" ( type "VARCHAR", NotNull : true ) 
     * @param u_action
     */
    public void setu_action( String u_action )
    {
        this.u_action = u_action;
    }
    /**
     * Get the "uAction" field value
     * This field is mapped on the database column "u_action" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getu_action()
    {
        return this.u_action;
    }

    //--- DATABASE MAPPING : dbtable ( VARCHAR ) 
    /**
     * Set the "dbtable" field value
     * This field is mapped on the database column "dbtable" ( type "VARCHAR", NotNull : false ) 
     * @param dbtable
     */
    public void setdbtable( String dbtable )
    {
        this.dbtable = dbtable;
    }
    /**
     * Get the "dbtable" field value
     * This field is mapped on the database column "dbtable" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getdbtable()
    {
        return this.dbtable;
    }

    //--- DATABASE MAPPING : actionid ( INT ) 
    /**
     * Set the "actionid" field value
     * This field is mapped on the database column "actionid" ( type "INT", NotNull : true ) 
     * @param actionid
     */
    public void setactionid( Integer actionid )
    {
        this.actionid = actionid;
    }
    /**
     * Get the "actionid" field value
     * This field is mapped on the database column "actionid" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getactionid()
    {
        return this.actionid;
    }

    //--- DATABASE MAPPING : fieldid ( INT ) 
    /**
     * Set the "fieldid" field value
     * This field is mapped on the database column "fieldid" ( type "INT", NotNull : false ) 
     * @param fieldid
     */
    public void setfieldid( Integer fieldid )
    {
        this.fieldid = fieldid;
    }
    /**
     * Get the "fieldid" field value
     * This field is mapped on the database column "fieldid" ( type "INT", NotNull : false ) 
     * @return the field value
     */
    public Integer getfieldid()
    {
        return this.fieldid;
    }



/*
 * CRUD functions
 */
    public static ActionLog load(String log_id) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from action_log where log_id=:log_id";
			logger.debug(sql);
			ActionLog obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("log_id", log_id)
					.executeAndFetchFirst( ActionLog.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+log_id +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [ActionLog]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static ActionLog load(Integer log_id) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from action_log where log_id=:log_id";
			logger.debug(sql);
			ActionLog obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("log_id", log_id)
					.executeAndFetchFirst( ActionLog.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+log_id +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [ActionLog]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "action_log "
    			+" log_id = " + log_id                + "; u_id = " + u_id
                + "; u_time = " + u_time
                + "; u_action = " + u_action
                + "; dbtable = " + dbtable
                + "; actionid = " + actionid
                + "; fieldid = " + fieldid
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( log_id !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "action_log")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table action_log");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            logger.info("Insert [action_log] BEGIN: "+ this.toString());

            String sql = "insert into action_log (u_id, u_time, u_action, dbtable, actionid, fieldid) values(:u_id, :u_time, :u_action, :dbtable, :actionid, :fieldid)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("u_id", this.u_id)
                            .addParameter("u_time", this.u_time)
                            .addParameter("u_action", this.u_action)
                            .addParameter("dbtable", this.dbtable)
                            .addParameter("actionid", this.actionid)
                            .addParameter("fieldid", this.fieldid)
    					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [action_log] debug: "+toString());
            // Set KEYID log_id = newID
                            log_id = createdId;
            logger.info("Add [action_log] OK: NewID="+createdId);
            logger.info("Add [action_log] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [action_log] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [action_log]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(log_id==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "action_log")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table action_log");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            ActionLog temp = ActionLog.load(this.log_id);
            if(temp!=null){
            	logger.info("Begin Update [action_log]: "+temp.toString());
            }
            logger.info("Update [action_log] BEGIN: "+ this.toString());
			//
			String sql = "update action_log set u_id=:u_id, u_time=:u_time, u_action=:u_action, dbtable=:dbtable, actionid=:actionid, fieldid=:fieldid where log_id=:log_id";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("u_id", this.u_id)
                    .addParameter("u_time", this.u_time)
                    .addParameter("u_action", this.u_action)
                    .addParameter("dbtable", this.dbtable)
                    .addParameter("actionid", this.actionid)
                    .addParameter("fieldid", this.fieldid)
					.addParameter("log_id", this.log_id)
					.executeUpdate();
            logger.info("Update [action_log] OK: ID="+log_id);
            logger.info("End   Update [action_log]: "+toString());
		} catch (Exception t) {
			logger.error("Update [action_log] Error: ID=["+log_id +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [action_log]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(log_id==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "action_log")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table action_log");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Update Row [action_log] BEGIN: ID=["+log_id +"]. " + this.toString());
			String sql = "update action_log set STS=:STS where log_id=:log_id";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("log_id", this.log_id)
					.executeUpdate();
			logger.error("Delete [action_log] OK: ID=["+log_id +"].");
		} catch (Exception t) {
			logger.error("Delete [action_log] Error: ID=["+log_id +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [action_log]. ID=["+log_id + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(log_id==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "action_log")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table action_log");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Delete Row [action_log] BEGIN: ID=["+log_id +"]. " + this.toString());
			String sql = "delete from action_log where log_id=:log_id";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("log_id", this.log_id)
					.executeUpdate();
			logger.error("Delete Row [action_log] OK: ID=["+log_id +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update action_log. ID="+log_id)
                    .addParameter("dbtable", "action_log")
                    .addParameter("fieldid", log_id)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [action_log] Error: ID=["+log_id +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [action_log]. ID=["+log_id + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.Integer   
                if(this.u_id!=null)
                    return this.u_id.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Date      
                if(this.u_time!=null)
                    return this.u_time.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.String    
                if(this.u_action!=null)
                    return this.u_action.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.String    
                if(this.dbtable!=null)
                    return this.dbtable.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.Integer   
                if(this.actionid!=null)
                    return this.actionid.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.Integer   
                if(this.fieldid!=null)
                    return this.fieldid.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}