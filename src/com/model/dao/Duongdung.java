/*
 * Java bean class for entity table duongdung 
 * Created on 21 Oct 2017 ( Date ISO 2017-10-21 - Time 17:11:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "duongdung"
 * 
 * @author Telosys Tools Generator
 *
 */
public class Duongdung implements Serializable
{
    static Logger logger = LogManager.getLogger(Duongdung.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    DD_ID ; // Primary Key

    public String     DD_NAME ;
    public String     DD_MA ;

    /**
     * Default constructor
     */
    public Duongdung()
    {
        super();
        // Set default value 
this.DD_NAME = "";//String.format("%255.255s", "DD_NAME").trim(); // data type = String     255
this.DD_MA = "";//String.format("%16.16s", "DD_MA").trim(); // data type = String     16
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "ddId" field value
     * This field is mapped on the database column "DD_ID" ( type "INT", NotNull : true ) 
     * @param DD_ID
     */
	public void setDD_ID( Integer DD_ID )
    {
        this.DD_ID = DD_ID ;
    }
    /**
     * Get the "DD_ID" field value
     * This field is mapped on the database column "DD_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getDD_ID()
    {
        return this.DD_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : DD_NAME ( VARCHAR ) 
    /**
     * Set the "DD_NAME" field value
     * This field is mapped on the database column "DD_NAME" ( type "VARCHAR", NotNull : true ) 
     * @param DD_NAME
     */
    public void setDD_NAME( String DD_NAME )
    {
        this.DD_NAME = DD_NAME;
    }
    /**
     * Get the "ddName" field value
     * This field is mapped on the database column "DD_NAME" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDD_NAME()
    {
        return this.DD_NAME;
    }

    //--- DATABASE MAPPING : DD_MA ( VARCHAR ) 
    /**
     * Set the "DD_MA" field value
     * This field is mapped on the database column "DD_MA" ( type "VARCHAR", NotNull : true ) 
     * @param DD_MA
     */
    public void setDD_MA( String DD_MA )
    {
        this.DD_MA = DD_MA;
    }
    /**
     * Get the "ddMa" field value
     * This field is mapped on the database column "DD_MA" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDD_MA()
    {
        return this.DD_MA;
    }



/*
 * CRUD functions
 */
    public static Duongdung load(String DD_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from duongdung where DD_ID=:DD_ID";
			logger.debug(sql);
			Duongdung obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("DD_ID", DD_ID)
					.executeAndFetchFirst( Duongdung.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+DD_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Duongdung]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static Duongdung load(Integer DD_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from duongdung where DD_ID=:DD_ID";
			logger.debug(sql);
			Duongdung obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("DD_ID", DD_ID)
					.executeAndFetchFirst( Duongdung.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+DD_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Duongdung]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "duongdung "
    			+" DD_ID = " + DD_ID                + "; DD_NAME = " + DD_NAME
                + "; DD_MA = " + DD_MA
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( DD_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "duongdung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table duongdung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into duongdung (DD_NAME, DD_MA STS) values(:DD_NAME, :DD_MA 0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("DD_NAME", this.DD_NAME)
                            .addParameter("DD_MA", this.DD_MA)
    					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [duongdung] debug: "+toString());
            // Set KEYID DD_ID = newID
                            DD_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New duongdung. ID="+DD_ID)
                    .addParameter("dbtable", "duongdung")
                    .addParameter("fieldid", DD_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [duongdung] OK: NewID="+createdId);
		} catch (Exception t) {
            logger.error("Add [duongdung] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [duongdung]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(DD_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "duongdung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table duongdung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update duongdung set DD_NAME=:DD_NAME, DD_MA=:DD_MA where DD_ID=:DD_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("DD_NAME", this.DD_NAME)
                    .addParameter("DD_MA", this.DD_MA)
					.addParameter("DD_ID", this.DD_ID)
					.executeUpdate();
            logger.info("Update [duongdung] OK: ID="+DD_ID);
            logger.info("Update [duongdung] debug: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update duongdung. ID="+DD_ID)
                    .addParameter("dbtable", "duongdung")
                    .addParameter("fieldid", DD_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [duongdung] Error: ID=["+DD_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [duongdung]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(DD_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "duongdung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table duongdung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update duongdung set STS=:STS where DD_ID=:DD_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("DD_ID", this.DD_ID)
					.executeUpdate();
			logger.error("Delete [duongdung] OK: ID=["+DD_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update duongdung. ID="+DD_ID)
                    .addParameter("dbtable", "duongdung")
                    .addParameter("fieldid", DD_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [duongdung] Error: ID=["+DD_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [duongdung]. ID=["+DD_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(DD_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "duongdung")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table duongdung");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from duongdung where DD_ID=:DD_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("DD_ID", this.DD_ID)
					.executeUpdate();
			logger.error("Delete Row [duongdung] OK: ID=["+DD_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update duongdung. ID="+DD_ID)
                    .addParameter("dbtable", "duongdung")
                    .addParameter("fieldid", DD_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [duongdung] Error: ID=["+DD_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [duongdung]. ID=["+DD_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.String    
                if(this.DD_NAME!=null)
                    return this.DD_NAME.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.String    
                if(this.DD_MA!=null)
                    return this.DD_MA.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}