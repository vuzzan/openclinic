/*
 * Java bean class for entity table ct_nhapthuoc 
 * Created on 31 Oct 2017 ( Date ISO 2017-10-31 - Time 21:40:05 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;

import java.util.Date;

/**
 * Entity bean for table "ct_nhapthuoc"
 * 
 * @author Telosys Tools Generator
 *
 */
public class CtNhapthuoc implements Serializable
{
    static Logger logger = LogManager.getLogger(CtNhapthuoc.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    CT_ID ; // Primary Key

    public Integer    NT_ID ;
    public Integer    V_ID ;
    public String     TENKHO ;
    public Integer    THUOC_ID ;
    public String     TENTHUOC ;
    public String     DONVI ;
    public Date       HANDUNG ;
    public String     LOT_ID ;
    public Integer    SOLUONG ;
    public Integer    SL_TONKHO ;
    public Integer    SL_OUTSTANDING ;
    public Integer    SL_DADUNG ;
    public Integer    DONGIA ;
    public Integer    THANHTIEN ;
    public Integer    VAT ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public CtNhapthuoc()
    {
        super();
        // Set default value 
this.NT_ID = 0;                         // data type = Integer   
this.V_ID = 0;                         // data type = Integer   
this.TENKHO = "";//String.format("%32.32s", "TENKHO").trim(); // data type = String     32
this.THUOC_ID = 0;                         // data type = Integer   
this.TENTHUOC = "";//String.format("%256.256s", "TENTHUOC").trim(); // data type = String     256
this.DONVI = "";//String.format("%64.64s", "DONVI").trim(); // data type = String     64
this.HANDUNG = new java.util.Date();      // data type = Date      
this.LOT_ID = "";//String.format("%32.32s", "LOT_ID").trim(); // data type = String     32
this.SOLUONG = 0;                         // data type = Integer   
this.SL_TONKHO = 0;                         // data type = Integer   
this.SL_OUTSTANDING = 0;                         // data type = Integer   
this.SL_DADUNG = 0;                         // data type = Integer   
this.DONGIA = 0;                         // data type = Integer   
this.THANHTIEN = 0;                         // data type = Integer   
this.VAT = 0;                         // data type = Integer   
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "ctId" field value
     * This field is mapped on the database column "CT_ID" ( type "INT", NotNull : true ) 
     * @param CT_ID
     */
	public void setCT_ID( Integer CT_ID )
    {
        this.CT_ID = CT_ID ;
    }
    /**
     * Get the "CT_ID" field value
     * This field is mapped on the database column "CT_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getCT_ID()
    {
        return this.CT_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : NT_ID ( INT ) 
    /**
     * Set the "NT_ID" field value
     * This field is mapped on the database column "NT_ID" ( type "INT", NotNull : true ) 
     * @param NT_ID
     */
    public void setNT_ID( Integer NT_ID )
    {
        this.NT_ID = NT_ID;
    }
    /**
     * Get the "ntId" field value
     * This field is mapped on the database column "NT_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getNT_ID()
    {
        return this.NT_ID;
    }

    //--- DATABASE MAPPING : V_ID ( INT ) 
    /**
     * Set the "V_ID" field value
     * This field is mapped on the database column "V_ID" ( type "INT", NotNull : true ) 
     * @param V_ID
     */
    public void setV_ID( Integer V_ID )
    {
        this.V_ID = V_ID;
    }
    /**
     * Get the "vId" field value
     * This field is mapped on the database column "V_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getV_ID()
    {
        return this.V_ID;
    }

    //--- DATABASE MAPPING : TENKHO ( VARCHAR ) 
    /**
     * Set the "TENKHO" field value
     * This field is mapped on the database column "TENKHO" ( type "VARCHAR", NotNull : false ) 
     * @param TENKHO
     */
    public void setTENKHO( String TENKHO )
    {
        this.TENKHO = TENKHO;
    }
    /**
     * Get the "tenkho" field value
     * This field is mapped on the database column "TENKHO" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getTENKHO()
    {
        return this.TENKHO;
    }

    //--- DATABASE MAPPING : THUOC_ID ( INT ) 
    /**
     * Set the "THUOC_ID" field value
     * This field is mapped on the database column "THUOC_ID" ( type "INT", NotNull : true ) 
     * @param THUOC_ID
     */
    public void setTHUOC_ID( Integer THUOC_ID )
    {
        this.THUOC_ID = THUOC_ID;
    }
    /**
     * Get the "thuocId" field value
     * This field is mapped on the database column "THUOC_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTHUOC_ID()
    {
        return this.THUOC_ID;
    }

    //--- DATABASE MAPPING : TENTHUOC ( VARCHAR ) 
    /**
     * Set the "TENTHUOC" field value
     * This field is mapped on the database column "TENTHUOC" ( type "VARCHAR", NotNull : true ) 
     * @param TENTHUOC
     */
    public void setTENTHUOC( String TENTHUOC )
    {
        this.TENTHUOC = TENTHUOC;
    }
    /**
     * Get the "tenthuoc" field value
     * This field is mapped on the database column "TENTHUOC" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTENTHUOC()
    {
        return this.TENTHUOC;
    }

    //--- DATABASE MAPPING : DONVI ( VARCHAR ) 
    /**
     * Set the "DONVI" field value
     * This field is mapped on the database column "DONVI" ( type "VARCHAR", NotNull : true ) 
     * @param DONVI
     */
    public void setDONVI( String DONVI )
    {
        this.DONVI = DONVI;
    }
    /**
     * Get the "donvi" field value
     * This field is mapped on the database column "DONVI" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDONVI()
    {
        return this.DONVI;
    }

    //--- DATABASE MAPPING : HANDUNG ( TIMESTAMP ) 
    /**
     * Set the "HANDUNG" field value
     * This field is mapped on the database column "HANDUNG" ( type "TIMESTAMP", NotNull : true ) 
     * @param HANDUNG
     */
    public void setHANDUNG( Date HANDUNG )
    {
        this.HANDUNG = HANDUNG;
    }
    /**
     * Get the "handung" field value
     * This field is mapped on the database column "HANDUNG" ( type "TIMESTAMP", NotNull : true ) 
     * @return the field value
     */
    public Date getHANDUNG()
    {
        return this.HANDUNG;
    }

    //--- DATABASE MAPPING : LOT_ID ( VARCHAR ) 
    /**
     * Set the "LOT_ID" field value
     * This field is mapped on the database column "LOT_ID" ( type "VARCHAR", NotNull : true ) 
     * @param LOT_ID
     */
    public void setLOT_ID( String LOT_ID )
    {
        this.LOT_ID = LOT_ID;
    }
    /**
     * Get the "lotId" field value
     * This field is mapped on the database column "LOT_ID" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getLOT_ID()
    {
        return this.LOT_ID;
    }

    //--- DATABASE MAPPING : SOLUONG ( INT ) 
    /**
     * Set the "SOLUONG" field value
     * This field is mapped on the database column "SOLUONG" ( type "INT", NotNull : true ) 
     * @param SOLUONG
     */
    public void setSOLUONG( Integer SOLUONG )
    {
        this.SOLUONG = SOLUONG;
    }
    /**
     * Get the "soluong" field value
     * This field is mapped on the database column "SOLUONG" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSOLUONG()
    {
        return this.SOLUONG;
    }

    //--- DATABASE MAPPING : SL_TONKHO ( INT ) 
    /**
     * Set the "SL_TONKHO" field value
     * This field is mapped on the database column "SL_TONKHO" ( type "INT", NotNull : true ) 
     * @param SL_TONKHO
     */
    public void setSL_TONKHO( Integer SL_TONKHO )
    {
        this.SL_TONKHO = SL_TONKHO;
    }
    /**
     * Get the "slTonkho" field value
     * This field is mapped on the database column "SL_TONKHO" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSL_TONKHO()
    {
        return this.SL_TONKHO;
    }

    //--- DATABASE MAPPING : SL_OUTSTANDING ( INT ) 
    /**
     * Set the "SL_OUTSTANDING" field value
     * This field is mapped on the database column "SL_OUTSTANDING" ( type "INT", NotNull : true ) 
     * @param SL_OUTSTANDING
     */
    public void setSL_OUTSTANDING( Integer SL_OUTSTANDING )
    {
        this.SL_OUTSTANDING = SL_OUTSTANDING;
    }
    /**
     * Get the "slOutstanding" field value
     * This field is mapped on the database column "SL_OUTSTANDING" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSL_OUTSTANDING()
    {
        return this.SL_OUTSTANDING;
    }

    //--- DATABASE MAPPING : SL_DADUNG ( INT ) 
    /**
     * Set the "SL_DADUNG" field value
     * This field is mapped on the database column "SL_DADUNG" ( type "INT", NotNull : true ) 
     * @param SL_DADUNG
     */
    public void setSL_DADUNG( Integer SL_DADUNG )
    {
        this.SL_DADUNG = SL_DADUNG;
    }
    /**
     * Get the "slDadung" field value
     * This field is mapped on the database column "SL_DADUNG" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSL_DADUNG()
    {
        return this.SL_DADUNG;
    }

    //--- DATABASE MAPPING : DONGIA ( INT ) 
    /**
     * Set the "DONGIA" field value
     * This field is mapped on the database column "DONGIA" ( type "INT", NotNull : true ) 
     * @param DONGIA
     */
    public void setDONGIA( Integer DONGIA )
    {
        this.DONGIA = DONGIA;
    }
    /**
     * Get the "dongia" field value
     * This field is mapped on the database column "DONGIA" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getDONGIA()
    {
        return this.DONGIA;
    }

    //--- DATABASE MAPPING : THANHTIEN ( INT ) 
    /**
     * Set the "THANHTIEN" field value
     * This field is mapped on the database column "THANHTIEN" ( type "INT", NotNull : true ) 
     * @param THANHTIEN
     */
    public void setTHANHTIEN( Integer THANHTIEN )
    {
        this.THANHTIEN = THANHTIEN;
    }
    /**
     * Get the "thanhtien" field value
     * This field is mapped on the database column "THANHTIEN" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getTHANHTIEN()
    {
        return this.THANHTIEN;
    }

    //--- DATABASE MAPPING : VAT ( INT ) 
    /**
     * Set the "VAT" field value
     * This field is mapped on the database column "VAT" ( type "INT", NotNull : true ) 
     * @param VAT
     */
    public void setVAT( Integer VAT )
    {
        this.VAT = VAT;
    }
    /**
     * Get the "vat" field value
     * This field is mapped on the database column "VAT" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getVAT()
    {
        return this.VAT;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static CtNhapthuoc load(String CT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from ct_nhapthuoc where CT_ID=:CT_ID";
			logger.debug(sql);
			CtNhapthuoc obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("CT_ID", CT_ID)
					.executeAndFetchFirst( CtNhapthuoc.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+CT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [CtNhapthuoc]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static CtNhapthuoc load(Integer CT_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from ct_nhapthuoc where CT_ID=:CT_ID";
			logger.debug(sql);
			CtNhapthuoc obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("CT_ID", CT_ID)
					.executeAndFetchFirst( CtNhapthuoc.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+CT_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [CtNhapthuoc]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "ct_nhapthuoc "
    			+" CT_ID = " + CT_ID                + "; NT_ID = " + NT_ID
                + "; V_ID = " + V_ID
                + "; TENKHO = " + TENKHO
                + "; THUOC_ID = " + THUOC_ID
                + "; TENTHUOC = " + TENTHUOC
                + "; DONVI = " + DONVI
                + "; HANDUNG = " + HANDUNG
                + "; LOT_ID = " + LOT_ID
                + "; SOLUONG = " + SOLUONG
                + "; SL_TONKHO = " + SL_TONKHO
                + "; SL_OUTSTANDING = " + SL_OUTSTANDING
                + "; SL_DADUNG = " + SL_DADUNG
                + "; DONGIA = " + DONGIA
                + "; THANHTIEN = " + THANHTIEN
                + "; VAT = " + VAT
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( CT_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "ct_nhapthuoc")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table ct_nhapthuoc");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into ct_nhapthuoc (NT_ID, V_ID, TENKHO, THUOC_ID, TENTHUOC, DONVI, HANDUNG, LOT_ID, SOLUONG, SL_TONKHO, SL_OUTSTANDING, SL_DADUNG, DONGIA, THANHTIEN, VAT,  STS) values(:NT_ID, :V_ID, :TENKHO, :THUOC_ID, :TENTHUOC, :DONVI, :HANDUNG, :LOT_ID, :SOLUONG, :SL_TONKHO, :SL_OUTSTANDING, :SL_DADUNG, :DONGIA, :THANHTIEN, :VAT,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("NT_ID", this.NT_ID)
                            .addParameter("V_ID", this.V_ID)
                            .addParameter("TENKHO", this.TENKHO)
                            .addParameter("THUOC_ID", this.THUOC_ID)
                            .addParameter("TENTHUOC", this.TENTHUOC)
                            .addParameter("DONVI", this.DONVI)
                            .addParameter("HANDUNG", this.HANDUNG)
                            .addParameter("LOT_ID", this.LOT_ID)
                            .addParameter("SOLUONG", this.SOLUONG)
                            .addParameter("SL_TONKHO", this.SL_TONKHO)
                            .addParameter("SL_OUTSTANDING", this.SL_OUTSTANDING)
                            .addParameter("SL_DADUNG", this.SL_DADUNG)
                            .addParameter("DONGIA", this.DONGIA)
                            .addParameter("THANHTIEN", this.THANHTIEN)
                            .addParameter("VAT", this.VAT)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [ct_nhapthuoc] debug: "+toString());
            // Set KEYID CT_ID = newID
                            CT_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New ct_nhapthuoc. ID="+CT_ID)
                    .addParameter("dbtable", "ct_nhapthuoc")
                    .addParameter("fieldid", CT_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [ct_nhapthuoc] OK: NewID="+createdId);
            logger.info("Add [ct_nhapthuoc] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [ct_nhapthuoc] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [ct_nhapthuoc]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(CT_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "ct_nhapthuoc")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table ct_nhapthuoc");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            CtNhapthuoc temp = CtNhapthuoc.load(this.CT_ID);
            if(temp!=null){
            	logger.info("Begin Update [ct_nhapthuoc]: "+temp.toString());
            }
			//
			String sql = "update ct_nhapthuoc set NT_ID=:NT_ID, V_ID=:V_ID, TENKHO=:TENKHO, THUOC_ID=:THUOC_ID, TENTHUOC=:TENTHUOC, DONVI=:DONVI, HANDUNG=:HANDUNG, LOT_ID=:LOT_ID, SOLUONG=:SOLUONG, SL_TONKHO=:SL_TONKHO, SL_OUTSTANDING=:SL_OUTSTANDING, SL_DADUNG=:SL_DADUNG, DONGIA=:DONGIA, THANHTIEN=:THANHTIEN, VAT=:VAT, STS=:STS where CT_ID=:CT_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("NT_ID", this.NT_ID)
                    .addParameter("V_ID", this.V_ID)
                    .addParameter("TENKHO", this.TENKHO)
                    .addParameter("THUOC_ID", this.THUOC_ID)
                    .addParameter("TENTHUOC", this.TENTHUOC)
                    .addParameter("DONVI", this.DONVI)
                    .addParameter("HANDUNG", this.HANDUNG)
                    .addParameter("LOT_ID", this.LOT_ID)
                    .addParameter("SOLUONG", this.SOLUONG)
                    .addParameter("SL_TONKHO", this.SL_TONKHO)
                    .addParameter("SL_OUTSTANDING", this.SL_OUTSTANDING)
                    .addParameter("SL_DADUNG", this.SL_DADUNG)
                    .addParameter("DONGIA", this.DONGIA)
                    .addParameter("THANHTIEN", this.THANHTIEN)
                    .addParameter("VAT", this.VAT)
                    .addParameter("STS", this.STS)
					.addParameter("CT_ID", this.CT_ID)
					.executeUpdate();
            logger.info("Update [ct_nhapthuoc] OK: ID="+CT_ID);
            logger.info("End   Update [ct_nhapthuoc]: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update ct_nhapthuoc. ID="+CT_ID)
                    .addParameter("dbtable", "ct_nhapthuoc")
                    .addParameter("fieldid", CT_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [ct_nhapthuoc] Error: ID=["+CT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [ct_nhapthuoc]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(CT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "ct_nhapthuoc")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table ct_nhapthuoc");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update ct_nhapthuoc set STS=:STS where CT_ID=:CT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("CT_ID", this.CT_ID)
					.executeUpdate();
			logger.error("Delete [ct_nhapthuoc] OK: ID=["+CT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update ct_nhapthuoc. ID="+CT_ID)
                    .addParameter("dbtable", "ct_nhapthuoc")
                    .addParameter("fieldid", CT_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [ct_nhapthuoc] Error: ID=["+CT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [ct_nhapthuoc]. ID=["+CT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(CT_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "ct_nhapthuoc")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table ct_nhapthuoc");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from ct_nhapthuoc where CT_ID=:CT_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("CT_ID", this.CT_ID)
					.executeUpdate();
			logger.error("Delete Row [ct_nhapthuoc] OK: ID=["+CT_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update ct_nhapthuoc. ID="+CT_ID)
                    .addParameter("dbtable", "ct_nhapthuoc")
                    .addParameter("fieldid", CT_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [ct_nhapthuoc] Error: ID=["+CT_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [ct_nhapthuoc]. ID=["+CT_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.Integer   
                if(this.NT_ID!=null)
                    return this.NT_ID.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.Integer   
                if(this.V_ID!=null)
                    return this.V_ID.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.String    
                if(this.TENKHO!=null)
                    return this.TENKHO.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.Integer   
                if(this.THUOC_ID!=null)
                    return this.THUOC_ID.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.String    
                if(this.TENTHUOC!=null)
                    return this.TENTHUOC.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.String    
                if(this.DONVI!=null)
                    return this.DONVI.toString();
                else
                    return "N/A";
            case 6:
                // java.lang.Date      
                if(this.HANDUNG!=null)
                    return this.HANDUNG.toString();
                else
                    return "N/A";
            case 7:
                // java.lang.String    
                if(this.LOT_ID!=null)
                    return this.LOT_ID.toString();
                else
                    return "N/A";
            case 8:
                // java.lang.Integer   
                if(this.SOLUONG!=null)
                    return this.SOLUONG.toString();
                else
                    return "N/A";
            case 9:
                // java.lang.Integer   
                if(this.SL_TONKHO!=null)
                    return this.SL_TONKHO.toString();
                else
                    return "N/A";
            case 10:
                // java.lang.Integer   
                if(this.SL_OUTSTANDING!=null)
                    return this.SL_OUTSTANDING.toString();
                else
                    return "N/A";
            case 11:
                // java.lang.Integer   
                if(this.SL_DADUNG!=null)
                    return this.SL_DADUNG.toString();
                else
                    return "N/A";
            case 12:
                // java.lang.Integer   
                if(this.DONGIA!=null)
                    return this.DONGIA.toString();
                else
                    return "N/A";
            case 13:
                // java.lang.Integer   
                if(this.THANHTIEN!=null)
                    return this.THANHTIEN.toString();
                else
                    return "N/A";
            case 14:
                // java.lang.Integer   
                if(this.VAT!=null)
                    return this.VAT.toString();
                else
                    return "N/A";
            case 15:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}