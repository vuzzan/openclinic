/*
 * Java bean class for entity table users 
 * Created on 21 Oct 2017 ( Date ISO 2017-10-21 - Time 17:11:22 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;


/**
 * Entity bean for table "users"
 * 
 * @author Telosys Tools Generator
 *
 */
public class Users implements Serializable
{
    static Logger logger = LogManager.getLogger(Users.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    U_ID ; // Primary Key

    public String     MA_KHOA ;
    public String     MACCHN ;
    public String     TEN_NHANVIEN ;
    public String     NGAYSINH ;
    public String     DIA_CHI ;
    public String     MA_CHUYENNGANH ;
    public String     U_NAME ;
    public String     U_PASS ;
    public String     LOAI ;
    public String     NGAYCAP_CCHN ;
    public String     NOICAP_CCHN ;
    public String     TUNGAY ;
    public String     DENNGAY ;
    public String     CHUNGCHI_KHAC ;
    public Integer    STS ;

    /**
     * Default constructor
     */
    public Users()
    {
        super();
        // Set default value 
this.MA_KHOA = "";//String.format("%255.255s", "MA_KHOA").trim(); // data type = String     255
this.MACCHN = "";//String.format("%16.16s", "MACCHN").trim(); // data type = String     16
this.TEN_NHANVIEN = "";//String.format("%255.255s", "TEN_NHANVIEN").trim(); // data type = String     255
this.NGAYSINH = "";//String.format("%16.16s", "NGAYSINH").trim(); // data type = String     16
this.DIA_CHI = "";//String.format("%255.255s", "DIA_CHI").trim(); // data type = String     255
this.MA_CHUYENNGANH = "";//String.format("%16.16s", "MA_CHUYENNGANH").trim(); // data type = String     16
this.U_NAME = "";//String.format("%8.8s", "U_NAME").trim(); // data type = String     8
this.U_PASS = "";//String.format("%8.8s", "U_PASS").trim(); // data type = String     8
this.LOAI = "";//String.format("%8.8s", "LOAI").trim(); // data type = String     8
this.NGAYCAP_CCHN = "";//String.format("%16.16s", "NGAYCAP_CCHN").trim(); // data type = String     16
this.NOICAP_CCHN = "";//String.format("%255.255s", "NOICAP_CCHN").trim(); // data type = String     255
this.TUNGAY = "";//String.format("%16.16s", "TUNGAY").trim(); // data type = String     16
this.DENNGAY = "";//String.format("%16.16s", "DENNGAY").trim(); // data type = String     16
this.CHUNGCHI_KHAC = "";//String.format("%255.255s", "CHUNGCHI_KHAC").trim(); // data type = String     255
this.STS = 0;                         // data type = Integer   
        // End Set default value 
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "uId" field value
     * This field is mapped on the database column "U_ID" ( type "INT", NotNull : true ) 
     * @param U_ID
     */
	public void setU_ID( Integer U_ID )
    {
        this.U_ID = U_ID ;
    }
    /**
     * Get the "U_ID" field value
     * This field is mapped on the database column "U_ID" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getU_ID()
    {
        return this.U_ID;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : MA_KHOA ( VARCHAR ) 
    /**
     * Set the "MA_KHOA" field value
     * This field is mapped on the database column "MA_KHOA" ( type "VARCHAR", NotNull : true ) 
     * @param MA_KHOA
     */
    public void setMA_KHOA( String MA_KHOA )
    {
        this.MA_KHOA = MA_KHOA;
    }
    /**
     * Get the "maKhoa" field value
     * This field is mapped on the database column "MA_KHOA" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_KHOA()
    {
        return this.MA_KHOA;
    }

    //--- DATABASE MAPPING : MACCHN ( VARCHAR ) 
    /**
     * Set the "MACCHN" field value
     * This field is mapped on the database column "MACCHN" ( type "VARCHAR", NotNull : true ) 
     * @param MACCHN
     */
    public void setMACCHN( String MACCHN )
    {
        this.MACCHN = MACCHN;
    }
    /**
     * Get the "macchn" field value
     * This field is mapped on the database column "MACCHN" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMACCHN()
    {
        return this.MACCHN;
    }

    //--- DATABASE MAPPING : TEN_NHANVIEN ( VARCHAR ) 
    /**
     * Set the "TEN_NHANVIEN" field value
     * This field is mapped on the database column "TEN_NHANVIEN" ( type "VARCHAR", NotNull : true ) 
     * @param TEN_NHANVIEN
     */
    public void setTEN_NHANVIEN( String TEN_NHANVIEN )
    {
        this.TEN_NHANVIEN = TEN_NHANVIEN;
    }
    /**
     * Get the "tenNhanvien" field value
     * This field is mapped on the database column "TEN_NHANVIEN" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTEN_NHANVIEN()
    {
        return this.TEN_NHANVIEN;
    }

    //--- DATABASE MAPPING : NGAYSINH ( VARCHAR ) 
    /**
     * Set the "NGAYSINH" field value
     * This field is mapped on the database column "NGAYSINH" ( type "VARCHAR", NotNull : true ) 
     * @param NGAYSINH
     */
    public void setNGAYSINH( String NGAYSINH )
    {
        this.NGAYSINH = NGAYSINH;
    }
    /**
     * Get the "ngaysinh" field value
     * This field is mapped on the database column "NGAYSINH" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getNGAYSINH()
    {
        return this.NGAYSINH;
    }

    //--- DATABASE MAPPING : DIA_CHI ( VARCHAR ) 
    /**
     * Set the "DIA_CHI" field value
     * This field is mapped on the database column "DIA_CHI" ( type "VARCHAR", NotNull : true ) 
     * @param DIA_CHI
     */
    public void setDIA_CHI( String DIA_CHI )
    {
        this.DIA_CHI = DIA_CHI;
    }
    /**
     * Get the "diaChi" field value
     * This field is mapped on the database column "DIA_CHI" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDIA_CHI()
    {
        return this.DIA_CHI;
    }

    //--- DATABASE MAPPING : MA_CHUYENNGANH ( VARCHAR ) 
    /**
     * Set the "MA_CHUYENNGANH" field value
     * This field is mapped on the database column "MA_CHUYENNGANH" ( type "VARCHAR", NotNull : true ) 
     * @param MA_CHUYENNGANH
     */
    public void setMA_CHUYENNGANH( String MA_CHUYENNGANH )
    {
        this.MA_CHUYENNGANH = MA_CHUYENNGANH;
    }
    /**
     * Get the "maChuyennganh" field value
     * This field is mapped on the database column "MA_CHUYENNGANH" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getMA_CHUYENNGANH()
    {
        return this.MA_CHUYENNGANH;
    }

    //--- DATABASE MAPPING : U_NAME ( VARCHAR ) 
    /**
     * Set the "U_NAME" field value
     * This field is mapped on the database column "U_NAME" ( type "VARCHAR", NotNull : true ) 
     * @param U_NAME
     */
    public void setU_NAME( String U_NAME )
    {
        this.U_NAME = U_NAME;
    }
    /**
     * Get the "uName" field value
     * This field is mapped on the database column "U_NAME" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getU_NAME()
    {
        return this.U_NAME;
    }

    //--- DATABASE MAPPING : U_PASS ( VARCHAR ) 
    /**
     * Set the "U_PASS" field value
     * This field is mapped on the database column "U_PASS" ( type "VARCHAR", NotNull : true ) 
     * @param U_PASS
     */
    public void setU_PASS( String U_PASS )
    {
        this.U_PASS = U_PASS;
    }
    /**
     * Get the "uPass" field value
     * This field is mapped on the database column "U_PASS" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getU_PASS()
    {
        return this.U_PASS;
    }

    //--- DATABASE MAPPING : LOAI ( VARCHAR ) 
    /**
     * Set the "LOAI" field value
     * This field is mapped on the database column "LOAI" ( type "VARCHAR", NotNull : true ) 
     * @param LOAI
     */
    public void setLOAI( String LOAI )
    {
        this.LOAI = LOAI;
    }
    /**
     * Get the "loai" field value
     * This field is mapped on the database column "LOAI" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getLOAI()
    {
        return this.LOAI;
    }

    //--- DATABASE MAPPING : NGAYCAP_CCHN ( VARCHAR ) 
    /**
     * Set the "NGAYCAP_CCHN" field value
     * This field is mapped on the database column "NGAYCAP_CCHN" ( type "VARCHAR", NotNull : true ) 
     * @param NGAYCAP_CCHN
     */
    public void setNGAYCAP_CCHN( String NGAYCAP_CCHN )
    {
        this.NGAYCAP_CCHN = NGAYCAP_CCHN;
    }
    /**
     * Get the "ngaycapCchn" field value
     * This field is mapped on the database column "NGAYCAP_CCHN" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getNGAYCAP_CCHN()
    {
        return this.NGAYCAP_CCHN;
    }

    //--- DATABASE MAPPING : NOICAP_CCHN ( VARCHAR ) 
    /**
     * Set the "NOICAP_CCHN" field value
     * This field is mapped on the database column "NOICAP_CCHN" ( type "VARCHAR", NotNull : true ) 
     * @param NOICAP_CCHN
     */
    public void setNOICAP_CCHN( String NOICAP_CCHN )
    {
        this.NOICAP_CCHN = NOICAP_CCHN;
    }
    /**
     * Get the "noicapCchn" field value
     * This field is mapped on the database column "NOICAP_CCHN" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getNOICAP_CCHN()
    {
        return this.NOICAP_CCHN;
    }

    //--- DATABASE MAPPING : TUNGAY ( VARCHAR ) 
    /**
     * Set the "TUNGAY" field value
     * This field is mapped on the database column "TUNGAY" ( type "VARCHAR", NotNull : true ) 
     * @param TUNGAY
     */
    public void setTUNGAY( String TUNGAY )
    {
        this.TUNGAY = TUNGAY;
    }
    /**
     * Get the "tungay" field value
     * This field is mapped on the database column "TUNGAY" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getTUNGAY()
    {
        return this.TUNGAY;
    }

    //--- DATABASE MAPPING : DENNGAY ( VARCHAR ) 
    /**
     * Set the "DENNGAY" field value
     * This field is mapped on the database column "DENNGAY" ( type "VARCHAR", NotNull : true ) 
     * @param DENNGAY
     */
    public void setDENNGAY( String DENNGAY )
    {
        this.DENNGAY = DENNGAY;
    }
    /**
     * Get the "denngay" field value
     * This field is mapped on the database column "DENNGAY" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getDENNGAY()
    {
        return this.DENNGAY;
    }

    //--- DATABASE MAPPING : CHUNGCHI_KHAC ( VARCHAR ) 
    /**
     * Set the "CHUNGCHI_KHAC" field value
     * This field is mapped on the database column "CHUNGCHI_KHAC" ( type "VARCHAR", NotNull : true ) 
     * @param CHUNGCHI_KHAC
     */
    public void setCHUNGCHI_KHAC( String CHUNGCHI_KHAC )
    {
        this.CHUNGCHI_KHAC = CHUNGCHI_KHAC;
    }
    /**
     * Get the "chungchiKhac" field value
     * This field is mapped on the database column "CHUNGCHI_KHAC" ( type "VARCHAR", NotNull : true ) 
     * @return the field value
     */
    public String getCHUNGCHI_KHAC()
    {
        return this.CHUNGCHI_KHAC;
    }

    //--- DATABASE MAPPING : STS ( INT ) 
    /**
     * Set the "STS" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @param STS
     */
    public void setSTS( Integer STS )
    {
        this.STS = STS;
    }
    /**
     * Get the "sts" field value
     * This field is mapped on the database column "STS" ( type "INT", NotNull : true ) 
     * @return the field value
     */
    public Integer getSTS()
    {
        return this.STS;
    }



/*
 * CRUD functions
 */
    public static Users load(String U_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from users where U_ID=:U_ID";
			logger.debug(sql);
			Users obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("U_ID", U_ID)
					.executeAndFetchFirst( Users.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+U_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Users]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static Users load(Integer U_ID) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from users where U_ID=:U_ID";
			logger.debug(sql);
			Users obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("U_ID", U_ID)
					.executeAndFetchFirst( Users.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+U_ID +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [Users]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "users "
    			+" U_ID = " + U_ID                + "; MA_KHOA = " + MA_KHOA
                + "; MACCHN = " + MACCHN
                + "; TEN_NHANVIEN = " + TEN_NHANVIEN
                + "; NGAYSINH = " + NGAYSINH
                + "; DIA_CHI = " + DIA_CHI
                + "; MA_CHUYENNGANH = " + MA_CHUYENNGANH
                + "; U_NAME = " + U_NAME
                + "; U_PASS = " + U_PASS
                + "; LOAI = " + LOAI
                + "; NGAYCAP_CCHN = " + NGAYCAP_CCHN
                + "; NOICAP_CCHN = " + NOICAP_CCHN
                + "; TUNGAY = " + TUNGAY
                + "; DENNGAY = " + DENNGAY
                + "; CHUNGCHI_KHAC = " + CHUNGCHI_KHAC
                + "; STS = " + STS
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( U_ID !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "users")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table users");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            String sql = "insert into users (MA_KHOA, MACCHN, TEN_NHANVIEN, NGAYSINH, DIA_CHI, MA_CHUYENNGANH, U_NAME, U_PASS, LOAI, NGAYCAP_CCHN, NOICAP_CCHN, TUNGAY, DENNGAY, CHUNGCHI_KHAC,  STS) values(:MA_KHOA, :MACCHN, :TEN_NHANVIEN, :NGAYSINH, :DIA_CHI, :MA_CHUYENNGANH, :U_NAME, :U_PASS, :LOAI, :NGAYCAP_CCHN, :NOICAP_CCHN, :TUNGAY, :DENNGAY, :CHUNGCHI_KHAC,  0)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("MA_KHOA", this.MA_KHOA)
                            .addParameter("MACCHN", this.MACCHN)
                            .addParameter("TEN_NHANVIEN", this.TEN_NHANVIEN)
                            .addParameter("NGAYSINH", this.NGAYSINH)
                            .addParameter("DIA_CHI", this.DIA_CHI)
                            .addParameter("MA_CHUYENNGANH", this.MA_CHUYENNGANH)
                            .addParameter("U_NAME", this.U_NAME)
                            .addParameter("U_PASS", this.U_PASS)
                            .addParameter("LOAI", this.LOAI)
                            .addParameter("NGAYCAP_CCHN", this.NGAYCAP_CCHN)
                            .addParameter("NOICAP_CCHN", this.NOICAP_CCHN)
                            .addParameter("TUNGAY", this.TUNGAY)
                            .addParameter("DENNGAY", this.DENNGAY)
                            .addParameter("CHUNGCHI_KHAC", this.CHUNGCHI_KHAC)
        					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [users] debug: "+toString());
            // Set KEYID U_ID = newID
                            U_ID = createdId;
                            			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New users. ID="+U_ID)
                    .addParameter("dbtable", "users")
                    .addParameter("fieldid", U_ID)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [users] OK: NewID="+createdId);
		} catch (Exception t) {
            logger.error("Add [users] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [users]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(U_ID==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "users")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table users");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update users set MA_KHOA=:MA_KHOA, MACCHN=:MACCHN, TEN_NHANVIEN=:TEN_NHANVIEN, NGAYSINH=:NGAYSINH, DIA_CHI=:DIA_CHI, MA_CHUYENNGANH=:MA_CHUYENNGANH, U_NAME=:U_NAME, U_PASS=:U_PASS, LOAI=:LOAI, NGAYCAP_CCHN=:NGAYCAP_CCHN, NOICAP_CCHN=:NOICAP_CCHN, TUNGAY=:TUNGAY, DENNGAY=:DENNGAY, CHUNGCHI_KHAC=:CHUNGCHI_KHAC, STS=:STS where U_ID=:U_ID";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("MA_KHOA", this.MA_KHOA)
                    .addParameter("MACCHN", this.MACCHN)
                    .addParameter("TEN_NHANVIEN", this.TEN_NHANVIEN)
                    .addParameter("NGAYSINH", this.NGAYSINH)
                    .addParameter("DIA_CHI", this.DIA_CHI)
                    .addParameter("MA_CHUYENNGANH", this.MA_CHUYENNGANH)
                    .addParameter("U_NAME", this.U_NAME)
                    .addParameter("U_PASS", this.U_PASS)
                    .addParameter("LOAI", this.LOAI)
                    .addParameter("NGAYCAP_CCHN", this.NGAYCAP_CCHN)
                    .addParameter("NOICAP_CCHN", this.NOICAP_CCHN)
                    .addParameter("TUNGAY", this.TUNGAY)
                    .addParameter("DENNGAY", this.DENNGAY)
                    .addParameter("CHUNGCHI_KHAC", this.CHUNGCHI_KHAC)
                    .addParameter("STS", this.STS)
					.addParameter("U_ID", this.U_ID)
					.executeUpdate();
            logger.info("Update [users] OK: ID="+U_ID);
            logger.info("Update [users] debug: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update users. ID="+U_ID)
                    .addParameter("dbtable", "users")
                    .addParameter("fieldid", U_ID)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [users] Error: ID=["+U_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [users]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(U_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "users")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table users");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "update users set STS=:STS where U_ID=:U_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("U_ID", this.U_ID)
					.executeUpdate();
			logger.error("Delete [users] OK: ID=["+U_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update users. ID="+U_ID)
                    .addParameter("dbtable", "users")
                    .addParameter("fieldid", U_ID)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [users] Error: ID=["+U_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [users]. ID=["+U_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(U_ID==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "users")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table users");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
			String sql = "delete from users where U_ID=:U_ID";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("U_ID", this.U_ID)
					.executeUpdate();
			logger.error("Delete Row [users] OK: ID=["+U_ID +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update users. ID="+U_ID)
                    .addParameter("dbtable", "users")
                    .addParameter("fieldid", U_ID)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [users] Error: ID=["+U_ID +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [users]. ID=["+U_ID + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.String    
                if(this.MA_KHOA!=null)
                    return this.MA_KHOA.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.String    
                if(this.MACCHN!=null)
                    return this.MACCHN.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.String    
                if(this.TEN_NHANVIEN!=null)
                    return this.TEN_NHANVIEN.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.String    
                if(this.NGAYSINH!=null)
                    return this.NGAYSINH.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.String    
                if(this.DIA_CHI!=null)
                    return this.DIA_CHI.toString();
                else
                    return "N/A";
            case 5:
                // java.lang.String    
                if(this.MA_CHUYENNGANH!=null)
                    return this.MA_CHUYENNGANH.toString();
                else
                    return "N/A";
            case 6:
                // java.lang.String    
                if(this.U_NAME!=null)
                    return this.U_NAME.toString();
                else
                    return "N/A";
            case 7:
                // java.lang.String    
                if(this.U_PASS!=null)
                    return this.U_PASS.toString();
                else
                    return "N/A";
            case 8:
                // java.lang.String    
                if(this.LOAI!=null)
                    return this.LOAI.toString();
                else
                    return "N/A";
            case 9:
                // java.lang.String    
                if(this.NGAYCAP_CCHN!=null)
                    return this.NGAYCAP_CCHN.toString();
                else
                    return "N/A";
            case 10:
                // java.lang.String    
                if(this.NOICAP_CCHN!=null)
                    return this.NOICAP_CCHN.toString();
                else
                    return "N/A";
            case 11:
                // java.lang.String    
                if(this.TUNGAY!=null)
                    return this.TUNGAY.toString();
                else
                    return "N/A";
            case 12:
                // java.lang.String    
                if(this.DENNGAY!=null)
                    return this.DENNGAY.toString();
                else
                    return "N/A";
            case 13:
                // java.lang.String    
                if(this.CHUNGCHI_KHAC!=null)
                    return this.CHUNGCHI_KHAC.toString();
                else
                    return "N/A";
            case 14:
                // java.lang.Integer   
                if(this.STS!=null)
                    return this.STS.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}