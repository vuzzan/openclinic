/*
 * Java bean class for entity table check_the 
 * Created on 4 Jan 2018 ( Date ISO 2018-01-04 - Time 23:06:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 * template update by NEO
 */

package com.model.dao;

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;

import java.util.Date;
import java.util.List;

import java.util.Date;

/**
 * Entity bean for table "check_the"
 * 
 * @author Telosys Tools Generator
 *
 */
public class CheckThe implements Serializable
{
    static Logger logger = LogManager.getLogger(CheckThe.class.getName());
    private static final long serialVersionUID = 1L;

    public Integer    id ; // Primary Key

    public String     mathe ;
    public String     hoten ;
    public String     ngaysinh ;
    public String     result_text ;
    public Date       result_time ;

    /**
     * Default constructor
     */
    public CheckThe()
    {
        super();
        // Set default value 
this.mathe = "";//String.format("%15.15s", "mathe").trim(); // data type = String     15
this.hoten = "";//String.format("%50.50s", "hoten").trim(); // data type = String     50
this.ngaysinh = "";//String.format("%16.16s", "ngaysinh").trim(); // data type = String     16
this.result_text = "";//String.format("%65535.65535s", "result_text").trim(); // data type = String     65535
this.result_time = new java.util.Date();      // data type = Date      
        // End Set default value 
    }
    
    public void copy(CheckThe fromObj)
    {
        if(fromObj==null){
            return;
        }
        this.mathe = fromObj.mathe;
        this.hoten = fromObj.hoten;
        this.ngaysinh = fromObj.ngaysinh;
        this.result_text = fromObj.result_text;
        this.result_time = fromObj.result_time;
    }
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
    /**
     * Set the "id" field value
     * This field is mapped on the database column "id" ( type "INT", NotNull : true ) 
     * @param id
     */
	public void setid( Integer id )
    {
        this.id = id ;
    }
    /**
     * Get the "id" field value
     * This field is mapped on the database column "id" ( type "INT", NotNull : true ) 
     * @return the field value
     */
	public Integer getid()
    {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : mathe ( VARCHAR ) 
    /**
     * Set the "mathe" field value
     * This field is mapped on the database column "mathe" ( type "VARCHAR", NotNull : false ) 
     * @param mathe
     */
    public void setmathe( String mathe )
    {
        this.mathe = mathe;
    }
    /**
     * Get the "mathe" field value
     * This field is mapped on the database column "mathe" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getmathe()
    {
        return this.mathe;
    }

    //--- DATABASE MAPPING : hoten ( VARCHAR ) 
    /**
     * Set the "hoten" field value
     * This field is mapped on the database column "hoten" ( type "VARCHAR", NotNull : false ) 
     * @param hoten
     */
    public void sethoten( String hoten )
    {
        this.hoten = hoten;
    }
    /**
     * Get the "hoten" field value
     * This field is mapped on the database column "hoten" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String gethoten()
    {
        return this.hoten;
    }

    //--- DATABASE MAPPING : ngaysinh ( VARCHAR ) 
    /**
     * Set the "ngaysinh" field value
     * This field is mapped on the database column "ngaysinh" ( type "VARCHAR", NotNull : false ) 
     * @param ngaysinh
     */
    public void setngaysinh( String ngaysinh )
    {
        this.ngaysinh = ngaysinh;
    }
    /**
     * Get the "ngaysinh" field value
     * This field is mapped on the database column "ngaysinh" ( type "VARCHAR", NotNull : false ) 
     * @return the field value
     */
    public String getngaysinh()
    {
        return this.ngaysinh;
    }

    //--- DATABASE MAPPING : result_text ( TEXT ) 
    /**
     * Set the "result_text" field value
     * This field is mapped on the database column "result_text" ( type "TEXT", NotNull : false ) 
     * @param result_text
     */
    public void setresult_text( String result_text )
    {
        this.result_text = result_text;
    }
    /**
     * Get the "resultText" field value
     * This field is mapped on the database column "result_text" ( type "TEXT", NotNull : false ) 
     * @return the field value
     */
    public String getresult_text()
    {
        return this.result_text;
    }

    //--- DATABASE MAPPING : result_time ( TIMESTAMP ) 
    /**
     * Set the "result_time" field value
     * This field is mapped on the database column "result_time" ( type "TIMESTAMP", NotNull : false ) 
     * @param result_time
     */
    public void setresult_time( Date result_time )
    {
        this.result_time = result_time;
    }
    /**
     * Get the "resultTime" field value
     * This field is mapped on the database column "result_time" ( type "TIMESTAMP", NotNull : false ) 
     * @return the field value
     */
    public Date getresult_time()
    {
        return this.result_time;
    }



/*
 * CRUD functions
 */
    public static CheckThe load(String id) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from check_the where id=:id";
			logger.debug(sql);
			CheckThe obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("id", id)
					.executeAndFetchFirst( CheckThe.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+id +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [CheckThe]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static CheckThe load(Integer id) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from check_the where id=:id";
			logger.debug(sql);
			CheckThe obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("id", id)
					.executeAndFetchFirst( CheckThe.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+id +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [CheckThe]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "check_the "
    			+" id = " + id                + "; mathe = " + mathe
                + "; hoten = " + hoten
                + "; ngaysinh = " + ngaysinh
                + "; result_text = " + result_text
                + "; result_time = " + result_time
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( id !=null){
			// Update 
            update();
			return;
		}
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            logger.info("Insert [check_the] BEGIN: "+ this.toString());

            String sql = "insert into check_the (mathe, hoten, ngaysinh, result_text) values(:mathe, :hoten, :ngaysinh, :result_text)";
                            			int createdId = connection
                            					.createQuery(
							sql,
							true)
                        .addParameter("mathe", this.mathe)
                            .addParameter("hoten", this.hoten)
                            .addParameter("ngaysinh", this.ngaysinh)
                            .addParameter("result_text", this.result_text)
    					.executeUpdate()
                                                .getKey(Integer.class);
                            					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [check_the] debug: "+toString());
            // Set KEYID id = newID
                            id = createdId;
            logger.info("Add [check_the] OK: NewID="+createdId);
            logger.info("Add [check_the] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [check_the] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [check_the]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(id==null){
            insert();
			return;
		}

		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            CheckThe temp = CheckThe.load(this.id);
            if(temp!=null){
            	logger.info("Begin Update [check_the]: "+temp.toString());
            }
            logger.info("Update [check_the] BEGIN: "+ this.toString());
			//
			String sql = "update check_the set mathe=:mathe, hoten=:hoten, ngaysinh=:ngaysinh, result_text=:result_text where id=:id";
			connection
					.createQuery(
							sql,
							true)
                    .addParameter("mathe", this.mathe)
                    .addParameter("hoten", this.hoten)
                    .addParameter("ngaysinh", this.ngaysinh)
                    .addParameter("result_text", this.result_text)
					.addParameter("id", this.id)
					.executeUpdate();
            logger.info("Update [check_the] OK: ID="+id);
            logger.info("End   Update [check_the]: "+toString());
            
		} catch (Exception t) {
			logger.error("Update [check_the] Error: ID=["+id +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [check_the]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(id==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "check_the")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table check_the");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Update Row [check_the] BEGIN: ID=["+id +"]. " + this.toString());
			String sql = "update check_the set STS=:STS where id=:id";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("id", this.id)
					.executeUpdate();
			logger.error("Delete [check_the] OK: ID=["+id +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update check_the. ID="+id)
                    .addParameter("dbtable", "check_the")
                    .addParameter("fieldid", id)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [check_the] Error: ID=["+id +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [check_the]. ID=["+id + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(id==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "check_the")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table check_the");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Delete Row [check_the] BEGIN: ID=["+id +"]. " + this.toString());
			String sql = "delete from check_the where id=:id";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("id", this.id)
					.executeUpdate();
			logger.error("Delete Row [check_the] OK: ID=["+id +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update check_the. ID="+id)
                    .addParameter("dbtable", "check_the")
                    .addParameter("fieldid", id)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [check_the] Error: ID=["+id +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [check_the]. ID=["+id + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
            case 0:
                // java.lang.String    
                if(this.mathe!=null)
                    return this.mathe.toString();
                else
                    return "N/A";
            case 1:
                // java.lang.String    
                if(this.hoten!=null)
                    return this.hoten.toString();
                else
                    return "N/A";
            case 2:
                // java.lang.String    
                if(this.ngaysinh!=null)
                    return this.ngaysinh.toString();
                else
                    return "N/A";
            case 3:
                // java.lang.String    
                if(this.result_text!=null)
                    return this.result_text.toString();
                else
                    return "N/A";
            case 4:
                // java.lang.Date      
                if(this.result_time!=null)
                    return this.result_time.toString();
                else
                    return "N/A";
            default:
        }
        return "";
    }
}