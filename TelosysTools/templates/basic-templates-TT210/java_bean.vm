/*
 * Java bean class for entity table ${entity.databaseTable} 
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 * template update by NEO
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.io.Serializable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sql2o.Connection;
import com.DbHelper;

import java.util.Date;
import java.util.List;

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end

/**
 * Entity bean for table "${entity.databaseTable}"
 * 
 * @author Telosys Tools Generator
 *
 */
public class $entity.name implements Serializable
{
    static Logger logger = LogManager.getLogger(${entity.name}.class.getName());
    private static final long serialVersionUID = 1L;

#foreach( $field in $entity.keyAttributes )
    public $field.formattedType(10) $field.databaseName #if($field.hasInitialValue())= ${field.initialValue} #end; // Primary Key
#end

#foreach( $field in $entity.nonKeyAttributes )
    public $field.formattedType(10) $field.databaseName #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

    /**
     * Default constructor
     */
    public ${entity.name}()
    {
        super();
        // Set default value 
#foreach( $field in $entity.nonKeyAttributes )
#if ($field.formattedType(10).contains("String") == true )
this.${field.databaseName} = "";//String.format("%$field.getDatabaseSize().$field.getDatabaseSize()s", "${field.databaseName}").trim(); // data type = $field.formattedType(10) $field.getDatabaseSize()
#elseif ($field.formattedType(10).contains("Integer")==true )
this.${field.databaseName} = 0;                         // data type = $field.formattedType(10)
#elseif ($field.formattedType(10).contains("Date")==true )
this.${field.databaseName} = new java.util.Date();      // data type = $field.formattedType(10)
#elseif ($field.formattedType(10).contains("Double")==true )
this.${field.databaseName} = 0.0;      // data type = $field.formattedType(10)
#elseif ($field.formattedType(10).contains("Float")==true )
this.${field.databaseName} = (float)0.0;      // data type = $field.formattedType(10)
#else
this.${field.databaseName} = new java.lang.${field.formattedType(10)}(0.0);    // data type = $field.formattedType(10)
#end
#end
        // End Set default value 
    }
    
    public void copy($entity.name fromObj)
    {
        if(fromObj==null){
            return;
        }
#foreach( $field in $entity.nonKeyAttributes )
        this.${field.databaseName} = fromObj.${field.databaseName};
#end
    }
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    
    /**
     * Set the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @param $field.databaseName
     */
	public void set${field.databaseName}( $field.type $field.databaseName )
    {
        this.$field.databaseName = $field.databaseName ;
    }
#end
#if ( $field.getter )    
    /**
     * Get the "$field.databaseName" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @return the field value
     */
	public $field.type get${field.databaseName}()
    {
        return this.$field.databaseName;
    }
#end
#end

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $entity.nonKeyAttributes )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )
    /**
     * Set the "$field.databaseName" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @param $field.databaseName
     */
    public void set${field.databaseName}( $field.type $field.databaseName )
    {
        this.$field.databaseName = $field.databaseName;
    }
#end
#if ( $field.getter )
    /**
     * Get the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @return the field value
     */
    public $field.type get${field.databaseName}()
    {
        return this.$field.databaseName;
    }
#end

#end


/*
 * CRUD functions
 */
    public static ${entity.name} load(String #foreach( $field in $entity.keyAttributes)${field.databaseName}#end) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from $entity.databaseTable where #foreach( $field in $entity.keyAttributes)${field.databaseName}#end=:#foreach( $field in $entity.keyAttributes)${field.databaseName}#end";
			logger.debug(sql);
			${entity.name} obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("#foreach( $field in $entity.keyAttributes)${field.databaseName}#end", #foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.executeAndFetchFirst( ${entity.name}.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [$entity.name]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public static ${entity.name} load(Integer #foreach( $field in $entity.keyAttributes)${field.databaseName}#end) {
    	Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
			String sql = "select * from $entity.databaseTable where #foreach( $field in $entity.keyAttributes)${field.databaseName}#end=:#foreach( $field in $entity.keyAttributes)${field.databaseName}#end";
			logger.debug(sql);
			${entity.name} obj = connection
					.createQuery(
							sql,
							true)
					.addParameter("#foreach( $field in $entity.keyAttributes)${field.databaseName}#end", #foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.executeAndFetchFirst( ${entity.name}.class);
            logger.info(obj);
            logger.debug("Load "+obj);
            return obj;
		} catch (Exception t) {
            logger.error("Load Error: ID="+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"\nException=\n"+ t);
			throw new RuntimeException("LOAD [$entity.name]. ERROR: "+t.getMessage(), t);
		}
    }
    
    public String toString(){
    	String strData = "$entity.databaseTable "
    			+" #foreach( $field in $entity.keyAttributes)${field.databaseName}#end = " + #foreach( $field in $entity.keyAttributes)${field.databaseName}#end
#foreach( $field in $entity.nonKeyAttributes )
                + "; ${field.databaseName} = " + ${field.databaseName}
#end 
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	if( #foreach( $field in $entity.keyAttributes)${field.databaseName}#end !=null){
			// Update 
            update();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.INSERT, "${entity.databaseTable}")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE INSERT RIGHT for table ${entity.databaseTable}");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);

            logger.info("Insert [$entity.databaseTable] BEGIN: "+ this.toString());

            String sql = "insert into ${entity.databaseTable} (#foreach( $field in $entity.nonKeyAttributes )#if ( ${field.databaseName}!="STS" )${field.databaseName}#if( $foreach.hasNext ), #end#end#end STS) values(#foreach( $field in $entity.nonKeyAttributes )#if ( ${field.databaseName}!="STS" ):${field.databaseName}#if( $foreach.hasNext ), #end#end#end 0)";
            #foreach( $field in $entity.keyAttributes)
                #if ($field.formattedType(10).contains("String") == true )
			String createdId = connection
                #else
			int createdId = connection
                #end
            #end
					.createQuery(
							sql,
							true)
#foreach( $field in $entity.nonKeyAttributes )
    #if ( ${field.databaseName}!="STS" )
                    .addParameter("${field.databaseName}", this.${field.databaseName})
    #end
#end 
					.executeUpdate()
            #foreach( $field in $entity.keyAttributes)
                #if ($field.formattedType(10).contains("String") == true )
                    .getKey(String.class);
                #else
                    .getKey(Integer.class);
                #end
            #end
					
            logger.info("Add OK: NewID="+createdId);
            logger.info("Add OK [$entity.databaseTable] debug: "+toString());
            // Set KEYID #foreach( $field in $entity.keyAttributes)${field.databaseName}#end = newID
            #foreach( $field in $entity.keyAttributes)
                #if ($field.formattedType(10).contains("String") == true )
#foreach( $field in $entity.keyAttributes)${field.databaseName}#end = ""+createdId;
                #else
#foreach( $field in $entity.keyAttributes)${field.databaseName}#end = createdId;
                #end
            #end
			// Save log
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "New $entity.databaseTable. ID="+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
                    .addParameter("dbtable", "$entity.databaseTable")
                    .addParameter("fieldid", #foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.addParameter("actionid", 1)
					.executeUpdate();
            logger.info("Add [$entity.databaseTable] OK: NewID="+createdId);
            logger.info("Add [$entity.databaseTable] OK: Data="+this.toString());
		} catch (Exception t) {
            logger.error("Add [$entity.databaseTable] Error: "+"\nException=\n"+ t);
			throw new RuntimeException("ADD [$entity.databaseTable]. ERROR: "+t.getMessage(), t);
		}
	}
    
    public void update() {
		//
    	if(#foreach( $field in $entity.keyAttributes)${field.databaseName}#end==null){
            insert();
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.UPDATE, "${entity.databaseTable}")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE UPDATE RIGHT for table ${entity.databaseTable}");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            $entity.name temp = ${entity.name}.load(this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end);
            if(temp!=null){
            	logger.info("Begin Update [$entity.databaseTable]: "+temp.toString());
            }
            logger.info("Update [$entity.databaseTable] BEGIN: "+ this.toString());
			//
			String sql = "update ${entity.databaseTable} set#foreach( $field in $entity.nonKeyAttributes ) ${field.databaseName}=:${field.databaseName}#if( $foreach.hasNext ),#end#end where #foreach( $field in $entity.keyAttributes)${field.databaseName}#end=:#foreach( $field in $entity.keyAttributes)${field.databaseName}#end";
			connection
					.createQuery(
							sql,
							true)
#foreach( $field in $entity.nonKeyAttributes )
                    .addParameter("${field.databaseName}", this.${field.databaseName})
#end 
					.addParameter("#foreach( $field in $entity.keyAttributes)${field.databaseName}#end", this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.executeUpdate();
            logger.info("Update [$entity.databaseTable] OK: ID="+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end);
            logger.info("End   Update [$entity.databaseTable]: "+toString());
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update $entity.databaseTable. ID="+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
                    .addParameter("dbtable", "$entity.databaseTable")
                    .addParameter("fieldid", #foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.addParameter("actionid", 2)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Update [$entity.databaseTable] Error: ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Update [$entity.databaseTable]. ERROR: "+t.getMessage(), t);
		}
	}
    
    
    public void delete() {
		//
    	if(#foreach( $field in $entity.keyAttributes)${field.databaseName}#end==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "${entity.databaseTable}")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table ${entity.databaseTable}");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Update Row [$entity.databaseTable] BEGIN: ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"]. " + this.toString());
			String sql = "update ${entity.databaseTable} set STS=:STS where #foreach( $field in $entity.keyAttributes)${field.databaseName}#end=:#foreach( $field in $entity.keyAttributes)${field.databaseName}#end";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("STS", DbHelper.DELETE_STATUS)
					.addParameter("#foreach( $field in $entity.keyAttributes)${field.databaseName}#end", this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.executeUpdate();
			logger.error("Delete [$entity.databaseTable] OK: ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update $entity.databaseTable. ID="+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
                    .addParameter("dbtable", "$entity.databaseTable")
                    .addParameter("fieldid", #foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.addParameter("actionid", 3)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [$entity.databaseTable] Error: ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [$entity.databaseTable]. ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end + " ERROR: "+t.getMessage(), t);
		}
	}
    
	public void deleteRow() {
		//
    	if(#foreach( $field in $entity.keyAttributes)${field.databaseName}#end==null){
			return;
		}
        if(DbHelper.checkPhanQuyen(DbHelper.DELETE, "${entity.databaseTable}")==false){
            logger.info("YOU (" + DbHelper.getCurrentSessionUserName() + "), DON'T HAVE DELETE RIGHT for table ${entity.databaseTable}");
            return;
        }
		Connection connection = null;

		try {
			connection = DbHelper.getSql2o();
            connection.setRollbackOnException(false);
            logger.error("Delete Row [$entity.databaseTable] BEGIN: ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"]. " + this.toString());
			String sql = "delete from ${entity.databaseTable} where #foreach( $field in $entity.keyAttributes)${field.databaseName}#end=:#foreach( $field in $entity.keyAttributes)${field.databaseName}#end";
			connection
					.createQuery(
							sql,
							true)
					.addParameter("#foreach( $field in $entity.keyAttributes)${field.databaseName}#end", this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.executeUpdate();
			logger.error("Delete Row [$entity.databaseTable] OK: ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"].");
            connection
					.createQuery(
							"insert into action_log(u_id,u_action,dbtable,actionid,fieldid) values(:u_id,:u_action,:dbtable,:actionid,:fieldid)",
							true)
					.addParameter("u_id", DbHelper.getCurrentSessionUserId())
					.addParameter("u_action", "Update $entity.databaseTable. ID="+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
                    .addParameter("dbtable", "$entity.databaseTable")
                    .addParameter("fieldid", #foreach( $field in $entity.keyAttributes)${field.databaseName}#end)
					.addParameter("actionid", 4)
					.executeUpdate();
		} catch (Exception t) {
			logger.error("Delete [$entity.databaseTable] Error: ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end +"]."+"\nException=\n"+ t);
			throw new RuntimeException("Delete [$entity.databaseTable]. ID=["+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end + " ERROR: "+t.getMessage(), t);
		}
	}
    
    public String getIndex(int idx){
        switch(idx){
#foreach( $field in $entity.nonKeyAttributes )
   #set( $num = $velocityCount - 1 )
            case $num:
                // java.lang.$field.formattedType(10)
                if(this.${field.databaseName}!=null)
                    return this.${field.databaseName}.toString();
                else
                    return "N/A";
#end 
            default:
        }
        return "";
    }
}