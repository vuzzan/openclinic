/*
 * C# class for entity table ${entity.databaseTable} 
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 * template update by NEO
 */
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;

using System.Text;
using MySql.Data;
using MySql.Data.MySqlClient;
using System.Reflection;
using log4net;

/**
 * Entity bean for table "${entity.databaseTable}"
 * 
 * @author Telosys Tools Generator
 *
 */
namespace SecsGemDriver
{
public class ${entity.name}
{
    //Declare an instance for log4net
    private static readonly ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

#foreach( $field in $entity.keyAttributes )
    public #if($field.formattedType(10).toString().contains("Integer")) int #else string #end $field.databaseName { get; set; }
#end

#foreach( $field in $entity.nonKeyAttributes )
    public #if($field.formattedType(10).toString().contains("Integer")) int #else string #end $field.databaseName { get; set; }
#end

    public ${entity.name}()
    {
    }

/*
 * CRUD functions
 */
    public static List<${entity.name}> load() {
        return load("");
    }
    public static List<${entity.name}> load(string query) {
        List<${entity.name}> list = new List<${entity.name}>();
        MySqlDataReader rd = null;
        try {
            MySqlConnection conn = Main.getConnection();
            if(conn==null){
                return list;
            }
            if( query==null || query.Length==0 ){ 
                query = "select * from $entity.databaseTable";
            }
            Log.Info("Query: " + query);
            MySqlCommand cmd = new MySqlCommand(query, conn);

            rd = cmd.ExecuteReader();

            while(rd.Read())
            {
                ${entity.name} obj = new ${entity.name}();
#foreach( $field in $entity.keyAttributes ) 
    #if($field.formattedType(10).toString().contains("Integer")) 
                obj.${field.databaseName}= Convert.ToInt32( rd["${field.databaseName}"].ToString() );   // Primary
    #else 
                obj.${field.databaseName}=rd["${field.databaseName}"].ToString();   // Primary
    #end
#end 
#foreach( $field in $entity.nonKeyAttributes )
    #if($field.formattedType(10).toString().contains("Integer")) 
            obj.${field.databaseName}= Convert.ToInt32( rd["${field.databaseName}"].ToString() );
    #else 
            obj.${field.databaseName}=rd["${field.databaseName}"].ToString();
    #end
#end
                list.Add(obj);
                }
                rd.Close();
            }catch(MySqlException e)
            {
                Log.Error("Error: " + e.Message);
            }
        finally
        {
            if (rd != null)
            {
                rd.Close();
            }
        }
        return list;
    }
    public void query(string query) {
        try {
            MySqlConnection conn = Main.getConnection();
            if(conn==null){
                return;
            }
            Log.Info("Query: " + query);
            MySqlCommand cmd = new MySqlCommand(query, conn);
            cmd.ExecuteNonQuery();
            // Log file
            Int32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            string queryLog = "insert into action_log(log_text, log_time, user_id) values('"+query+"','"+unixTimestamp+"','"+Main.getUserId()+"')";
            MySqlCommand cmdLog = new MySqlCommand(queryLog, conn);
            cmdLog.ExecuteNonQuery();
            // End logfile
        }
        catch(MySqlException e)
        {
            Log.Error("Error: " + e.Message);
        }
        
        return;
    }
    
    public static ${entity.name} load(int #foreach( $field in $entity.keyAttributes)${field.databaseName}#end) {
        MySqlDataReader rd = null;
		try {
            MySqlConnection conn = Main.getConnection();
            if(conn==null){
                return null;
            }
            string query = "select * from $entity.databaseTable where #foreach( $field in $entity.keyAttributes)${field.databaseName}#end='"+#foreach( $field in $entity.keyAttributes)${field.databaseName}#end+"'";
            Log.Info("Query: " + query);
			MySqlCommand cmd = new MySqlCommand(query, conn);

                rd = cmd.ExecuteReader();
                ${entity.name} obj = new ${entity.name}();

                while(rd.Read())
                {
#foreach( $field in $entity.keyAttributes ) 
    #if($field.formattedType(10).toString().contains("Integer")) 
                obj.${field.databaseName}= Convert.ToInt32( rd["${field.databaseName}"].ToString() );   // Primary
    #else 
                obj.${field.databaseName}=rd["${field.databaseName}"].ToString();   // Primary
    #end
#end 
#foreach( $field in $entity.nonKeyAttributes )
    #if($field.formattedType(10).toString().contains("Integer")) 
            obj.${field.databaseName}= Convert.ToInt32( rd["${field.databaseName}"].ToString() );
    #else 
            obj.${field.databaseName}=rd["${field.databaseName}"].ToString();
    #end
#end
                    break;
                }
                rd.Close();

                return obj;
            }
            catch(MySqlException e)
            {
                Log.Error("Query: " + e.Message);
            }
        finally
        {
            if (rd != null)
            {
                rd.Close();
            }
        }
        return null;
    }

#foreach( $fielduuid in $entity.nonKeyAttributes )
    #if($fielduuid.databaseName.toString().contains("uuid"))

    public static ${entity.name} loadUUID(string uuid) {
        MySqlDataReader rd = null;
        try {
            MySqlConnection conn = Main.getConnection();
            if(conn==null){
                return null;
            }
            string query = "select * from $entity.databaseTable where ${fielduuid.databaseName}='"+uuid+"'";
            Log.Info("Query: " + query);
            MySqlCommand cmd = new MySqlCommand(query, conn);

                rd = cmd.ExecuteReader();
                ${entity.name} obj = new ${entity.name}();

                while(rd.Read())
                {
#foreach( $field in $entity.keyAttributes ) 
    #if($field.formattedType(10).toString().contains("Integer")) 
                obj.${field.databaseName}= Convert.ToInt32( rd["${field.databaseName}"].ToString() );   // Primary
    #else 
                obj.${field.databaseName}=rd["${field.databaseName}"].ToString();   // Primary
    #end
#end 
#foreach( $field in $entity.nonKeyAttributes )
    #if($field.formattedType(10).toString().contains("Integer")) 
            obj.${field.databaseName}= Convert.ToInt32( rd["${field.databaseName}"].ToString() );
    #else 
            obj.${field.databaseName}=rd["${field.databaseName}"].ToString();
    #end
#end
                    break;
                }
                rd.Close();

                return obj;
            }
            catch(MySqlException e)
            {
                Log.Error("Query: " + e.Message);
            }
        finally
        {
            if (rd != null)
            {
                rd.Close();
            }
        }

        return null;
    }
    #end
#end

    public String toString(){
    	String strData = "$entity.databaseTable "
    			+" #foreach( $field in $entity.keyAttributes)${field.databaseName}#end = " + #foreach( $field in $entity.keyAttributes)${field.databaseName}#end
#foreach( $field in $entity.nonKeyAttributes )
                + "; ${field.databaseName} = " + ${field.databaseName}
#end 
    			;
    	return strData;
    }
    
    public void insert() {
		//
    	try
            {
                MySqlConnection conn = Main.getConnection();
                if(conn==null){
                    return;
                }
                string query = "insert into ${entity.databaseTable}("+
#foreach( $field in $entity.nonKeyAttributes ) 
                                    "${field.databaseName}#if( $foreach.hasNext ),#end"+
#end 
" )values ("+
#foreach( $field in $entity.nonKeyAttributes ) 
                                    "'"+${field.databaseName}+"'#if( $foreach.hasNext ),#end"+
#end 
" )";
                Log.Info("INSERT: " + query);
                MySqlCommand cmd = new MySqlCommand(query, conn);
                cmd.ExecuteNonQuery();
                this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end = (int)cmd.LastInsertedId;
            // Log file
            Int32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            string log_text = "Create new ${entity.databaseTable}. ID="+this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end;
            string queryLog = "insert into action_log(log_text, log_time, user_id) values('"+log_text+"','"+unixTimestamp+"','"+Main.getUserId()+"')";
            MySqlCommand cmdLog = new MySqlCommand(queryLog, conn);
            cmdLog.ExecuteNonQuery();
            // End logfile
            }
            catch(MySqlException e)
            {
                Log.Error("Error: " + e.Message);
            }
	}
    
    public void update() {
         try
            {
                MySqlConnection conn = Main.getConnection();
                if(conn==null){
                    return;
                }
                string query = "update ${entity.databaseTable} set "+
#foreach( $field in $entity.nonKeyAttributes ) 
                                "${field.databaseName}='"+${field.databaseName}+"' #if( $foreach.hasNext ),#end"+
#end 

" where "+
"#foreach( $field in $entity.keyAttributes)${field.databaseName}#end='"+#foreach( $field in $entity.keyAttributes)${field.databaseName}+"'#end";
                Log.Info("UPDATE: " + query);
                MySqlCommand cmd = new MySqlCommand(query, conn);
                cmd.ExecuteNonQuery();
            // Log file
            Int32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            string log_text = "Update value ${entity.databaseTable}. ID="+this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end;
            string queryLog = "insert into action_log(log_text, log_time, user_id) values('"+log_text+"','"+unixTimestamp+"','"+Main.getUserId()+"')";
            MySqlCommand cmdLog = new MySqlCommand(queryLog, conn);
            cmdLog.ExecuteNonQuery();
            // End logfile
            }
            catch(MySqlException e)
            {
                Log.Error("Error: " + e.Message);
            }

	}
    
    
    public void delete() {
		//
        try
            {
                MySqlConnection conn = Main.getConnection();
                if(conn==null){
                    return;
                }
                string query = "update ${entity.databaseTable} set STS=3 "+
" where "+
"#foreach( $field in $entity.keyAttributes)${field.databaseName}#end='"+#foreach( $field in $entity.keyAttributes)${field.databaseName}+"'#end";
                Console.WriteLine("DELETE: "+query);
                MySqlCommand cmd = new MySqlCommand(query, conn);
                cmd.ExecuteNonQuery();
            // Log file
            Int32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            string log_text = "Update value ${entity.databaseTable}. ID="+this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end;
            string queryLog = "insert into action_log(log_text, log_time, user_id) values('"+log_text+"','"+unixTimestamp+"','"+Main.getUserId()+"')";
            MySqlCommand cmdLog = new MySqlCommand(queryLog, conn);
            cmdLog.ExecuteNonQuery();
            }
            catch(MySqlException e)
            {
                Log.Error("Error: " + e.Message);
            }
	}
    
	public void deleteRow() {
		//
        try
            {
                MySqlConnection conn = Main.getConnection();
                if(conn==null){
                    return;
                }
                string query = "delete from ${entity.databaseTable} "+
" where "+
"#foreach( $field in $entity.keyAttributes)${field.databaseName}#end='"+#foreach( $field in $entity.keyAttributes)${field.databaseName}+"'#end";
                Log.Info("DELETE: "+query);
                MySqlCommand cmd = new MySqlCommand(query, conn);
                cmd.ExecuteNonQuery();
            // Log file
            Int32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            string log_text = "Delete row ${entity.databaseTable}. ID="+this.#foreach( $field in $entity.keyAttributes)${field.databaseName}#end;
            string queryLog = "insert into action_log(log_text, log_time, user_id) values('"+log_text+"','"+unixTimestamp+"','"+Main.getUserId()+"')";
            MySqlCommand cmdLog = new MySqlCommand(queryLog, conn);
            cmdLog.ExecuteNonQuery();
            }
            catch(MySqlException e)
            {
                Log.Error("Error: " + e.Message);
            }
	}

        public ${entity.name}(System.Windows.Forms.DataGridViewRow row)
        {
            getFromRow(row);
        }
        
        public void getFromRow(System.Windows.Forms.DataGridViewRow row)
        {
#foreach( $field in $entity.keyAttributes )
$field.databaseName = Convert.ToInt32(row.Cells["$field.databaseName"].Value.ToString());

#end
#foreach( $field in $entity.nonKeyAttributes )
$field.databaseName = #if($field.formattedType(10).toString().contains("Integer")) Convert.ToInt32(row.Cells["$field.databaseName"].Value.ToString()); #else row.Cells["$field.databaseName"].Value.ToString(); #end

#end
        }
        
        public static DataTable loadDt(string query)
        {
            List<${entity.name}> list = load(query);
            return ListToDataTable(list);
        }

        public static DataTable loadDt()
        {
            List<${entity.name}> list = load("");
            return ListToDataTable(list);
        }

        public static DataTable ListToDataTable<T>(List<T> items)
        {

            DataTable dataTable = new DataTable(typeof(T).Name);

            //Get all the properties

            PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

            foreach (PropertyInfo prop in Props)
            {

                //Setting column names as Property names

                dataTable.Columns.Add(prop.Name);

            }

            foreach (T item in items)
            {

                var values = new object[Props.Length];

                for (int i = 0; i < Props.Length; i++)
                {

                    //inserting property values to datatable rows

                    values[i] = Props[i].GetValue(item, null);

                }

                dataTable.Rows.Add(values);

            }

            //put a breakpoint here and check datatable

            return dataTable;

        }

    }
}